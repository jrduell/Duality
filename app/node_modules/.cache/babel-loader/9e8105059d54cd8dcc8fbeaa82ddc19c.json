{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists, getPlaylistItems } from '../spotify';\nimport { catchErrors } from '../utils'; //import { ChangeContext } from '../contexts/context';\n\nexport const Playlists = () => {\n  _s();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const [playlistCount, setPlaylistCount] = useState(0);\n  const URLS = [];\n  const [didFinish, setDidFinish] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n      setPlaylistsData(data);\n    }; //console.log(playlistsData);\n\n\n    catchErrors(fetchData());\n  }, []); // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        setPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (playlists !== null) {\n          console.log(\"print here\");\n          Object.entries(playlists).forEach((key, value) => {\n            const url = key[1][\"external_urls\"][\"spotify\"];\n\n            if (!URLS.includes(url)) {\n              URLS.push(url);\n            }\n          });\n        }\n\n        console.log('-----------------------------');\n      }\n    };\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  return;\n};\n\n_s(Playlists, \"QWqtsLe4cRhX00TX53/hyPBV6xo=\");\n\n_c = Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","getPlaylistItems","catchErrors","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","playlistCount","setPlaylistCount","URLS","didFinish","setDidFinish","fetchData","data","items","fetchMoreData","next","get","console","log","Object","entries","forEach","key","value","url","includes","push"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists, getPlaylistItems } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n\r\nexport const Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n  const [playlistCount, setPlaylistCount] = useState(0);\r\n\r\n  const URLS = [];\r\n  const [didFinish, setDidFinish] = useState(false);\r\n\r\n  useEffect(() =>  {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      \r\n      setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n      ]));\r\n\r\n      setPlaylistsData(data);\r\n    };\r\n    //console.log(playlistsData);\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        //as long as there is more data to be retrieved\r\n        const { data } = await axios.get(playlistsData.next);\r\n        \r\n        setPlaylists(playlists => ([\r\n            ...playlists ? playlists : [],\r\n            ...data.items\r\n          ]));\r\n\r\n        setPlaylistsData(data);\r\n      } else {\r\n        //when all urls are retrieved\r\n        if(playlists !== null) { \r\n            console.log(\"print here\");\r\n            Object.entries(playlists).forEach((key, value) => {\r\n                const url = key[1][\"external_urls\"][\"spotify\"];\r\n                if (!URLS.includes(url)) { \r\n                    URLS.push(url);\r\n                }\r\n            });\r\n        }\r\n        console.log('-----------------------------');\r\n      }\r\n    };\r\n    \r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n  \r\n\r\n  return;\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,EAAkCC,gBAAlC,QAA0D,YAA1D;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CACA;;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAC7B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD;EACA,MAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,CAAD,CAAlD;EAEA,MAAMa,IAAI,GAAG,EAAb;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;EAEAC,SAAS,CAAC,MAAO;IACf,MAAMe,SAAS,GAAG,YAAY;MAC5B,MAAM;QAAEC;MAAF,IAAW,MAAMd,uBAAuB,EAA9C;MAEAO,YAAY,CAACD,SAAS,IAAK,CACzB,IAAGA,SAAS,GAAGA,SAAH,GAAe,EAA3B,CADyB,EAEzB,GAAGQ,IAAI,CAACC,KAFiB,CAAf,CAAZ;MAKAV,gBAAgB,CAACS,IAAD,CAAhB;IACD,CATD,CADe,CAWf;;;IACAZ,WAAW,CAACW,SAAS,EAAV,CAAX;EACD,CAbQ,EAaN,EAbM,CAAT,CAR6B,CAuB7B;EACA;;EACAf,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,aAAL,EAAoB;MAClB;IACD,CAHa,CAKd;IACA;;;IACA,MAAMY,aAAa,GAAG,YAAY;MAChC,IAAIZ,aAAa,CAACa,IAAlB,EAAwB;QACtB;QACA,MAAM;UAAEH;QAAF,IAAW,MAAMf,KAAK,CAACmB,GAAN,CAAUd,aAAa,CAACa,IAAxB,CAAvB;QAEAV,YAAY,CAACD,SAAS,IAAK,CACvB,IAAGA,SAAS,GAAGA,SAAH,GAAe,EAA3B,CADuB,EAEvB,GAAGQ,IAAI,CAACC,KAFe,CAAf,CAAZ;QAKAV,gBAAgB,CAACS,IAAD,CAAhB;MACD,CAVD,MAUO;QACL;QACA,IAAGR,SAAS,KAAK,IAAjB,EAAuB;UACnBa,OAAO,CAACC,GAAR,CAAY,YAAZ;UACAC,MAAM,CAACC,OAAP,CAAehB,SAAf,EAA0BiB,OAA1B,CAAkC,CAACC,GAAD,EAAMC,KAAN,KAAgB;YAC9C,MAAMC,GAAG,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAO,eAAP,EAAwB,SAAxB,CAAZ;;YACA,IAAI,CAACd,IAAI,CAACiB,QAAL,CAAcD,GAAd,CAAL,EAAyB;cACrBhB,IAAI,CAACkB,IAAL,CAAUF,GAAV;YACH;UACJ,CALD;QAMH;;QACDP,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACD;IACF,CAxBD;;IA0BAlB,WAAW,CAACc,aAAa,EAAd,CAAX;EAED,CAnCQ,EAmCN,CAACZ,aAAD,CAnCM,CAAT;EAuCA;AACD,CAjEM;;GAAMD,S;;KAAAA,S"},"metadata":{},"sourceType":"module"}