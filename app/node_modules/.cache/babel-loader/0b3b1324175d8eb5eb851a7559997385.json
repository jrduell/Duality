{"ast":null,"code":"import axios from \"axios\";\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n};\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\nconst hasTokenExpired = () => {\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return millisecondsElapsed / 1000 > Number(expireTime);\n};\n\nexport const logout = () => {\n  //clear all localstorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  } //navigate to homepage\n\n\n  window.location = window.location.origin;\n};\n\nconst refreshToken = async () => {\n  try {\n    //logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n      console.error('No refresh token available');\n      logout();\n    } // use '/refresh_token endpoint from our Node app\n\n\n    const {\n      data\n    } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`); //update localstorage values\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.accessToken);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); //reload the page for localstorage updates to be reflected\n\n    window.location.reload();\n  } catch (e) {\n    console.error(e);\n  }\n}; //handles retrieving spotify access token from local storage\n\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error'); //if there's an error or the token in localstorage has expired, refresh the token\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  } //if there is a valid access token in localstorage, use it\n\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  } // if there is a token in the URL query params, user is logging in for the first time\n\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    //store the query params in local storage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    }\n  } //set timestamp\n\n\n  window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); //return access token from query params\n\n  return queryParams[LOCALSTORAGE_KEYS.accessToken];\n};\n\nexport const accessToken = getAccessToken(); //axios global request headers\n\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\naxios.defaults.headers['Content-Type'] = 'application/json'; // Get current user's profile\n\nexport const getCurrentUserProfile = () => axios.get('/me');\nexport const getCurrentUserSavedTracks = () => axios.get('/me/tracks');\nexport const getCurrentUserPlaylists = () => axios.get('/me/playlists');\nexport const getUserPlaylists = UID => axios.get(`/users/${UID}/playlists`);\nexport const getPlaylistItems = PID => axios.get(`/playlists/${PID}/tracks`);\nexport const createPlaylist = UID => axios.post(`/users/${UID}/playlists`, {\n  name: 'Duality'\n});\nexport const addPlaylistItems = (PID, tracks) => axios.post(`/playlists/${PID}/tracks`, {\n  //uris: tracks\n  uris: tracks\n}); //export const getSpecifiedUserPlaylist = () => axios.get('/users/{user_id}/playlists);\n//get track /tracks/{id}\n//get several tracks /tracks (comma separated list)\n//post (add items to playlist) /playlists/{playlist_id}/tracks\n//(comma separated)\n//post (create playlist) /users/{user_id}/playlists","map":{"version":3,"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","hasTokenExpired","millisecondsElapsed","Date","now","Number","logout","property","removeItem","location","origin","console","error","data","get","setItem","reload","e","getAccessToken","queryString","search","urlParams","URLSearchParams","queryParams","hasError","defaults","baseURL","headers","getCurrentUserProfile","getCurrentUserSavedTracks","getCurrentUserPlaylists","getUserPlaylists","UID","getPlaylistItems","PID","createPlaylist","post","name","addPlaylistItems","tracks","uris"],"sources":["C:/Users/jrdue/Desktop/Duality/app/src/spotify.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n}\r\n\r\nconst LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n}\r\n\r\nconst hasTokenExpired = () => {\r\n    const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\r\n\r\n    if (!accessToken || !timestamp) { return false; }\r\n\r\n    const millisecondsElapsed = Date.now() - Number(timestamp);\r\n    return (millisecondsElapsed / 1000) > Number(expireTime);\r\n};\r\n\r\nexport const logout = () => {\r\n    //clear all localstorage items\r\n    for (const property in LOCALSTORAGE_KEYS) {\r\n        window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\r\n    }\r\n\r\n    //navigate to homepage\r\n    window.location = window.location.origin;\r\n};\r\n\r\nconst refreshToken = async () => {\r\n    try {\r\n        //logout if there's no refresh token stored or we've managed to get into a reload infinite loop\r\n        if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000) {\r\n            console.error('No refresh token available');\r\n            logout();\r\n        }\r\n\r\n        // use '/refresh_token endpoint from our Node app\r\n        const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\r\n\r\n        //update localstorage values\r\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.accessToken);\r\n        window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n\r\n        //reload the page for localstorage updates to be reflected\r\n        window.location.reload();\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\n//handles retrieving spotify access token from local storage\r\nconst getAccessToken = () => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const queryParams = {\r\n        [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n        [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n        [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n    }\r\n    const hasError = urlParams.get('error');\r\n\r\n    //if there's an error or the token in localstorage has expired, refresh the token\r\n    if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n        refreshToken();\r\n    }\r\n\r\n    //if there is a valid access token in localstorage, use it\r\n    if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\r\n        return LOCALSTORAGE_VALUES.accessToken;\r\n    }\r\n\r\n    // if there is a token in the URL query params, user is logging in for the first time\r\n    if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\r\n        //store the query params in local storage\r\n        for (const property in queryParams) {\r\n            window.localStorage.setItem(property, queryParams[property]);\r\n        }\r\n    }\r\n\r\n    //set timestamp\r\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n    //return access token from query params\r\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\r\n}\r\n\r\nexport const accessToken = getAccessToken();\r\n\r\n//axios global request headers\r\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\r\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\naxios.defaults.headers['Content-Type'] = 'application/json';\r\n\r\n\r\n// Get current user's profile\r\n\r\nexport const getCurrentUserProfile = () => axios.get('/me');\r\nexport const getCurrentUserSavedTracks = () => axios.get('/me/tracks');\r\nexport const getCurrentUserPlaylists = () => axios.get('/me/playlists');\r\nexport const getUserPlaylists = (UID) => axios.get(`/users/${UID}/playlists`);\r\nexport const getPlaylistItems = (PID) => axios.get(`/playlists/${PID}/tracks`);\r\nexport const createPlaylist = (UID) => axios.post(`/users/${UID}/playlists`, {\r\n    name: 'Duality'\r\n});\r\nexport const addPlaylistItems = (PID, tracks) => axios.post(`/playlists/${PID}/tracks`, {\r\n    //uris: tracks\r\n    uris: tracks\r\n})\r\n//export const getSpecifiedUserPlaylist = () => axios.get('/users/{user_id}/playlists);\r\n//get track /tracks/{id}\r\n//get several tracks /tracks (comma separated list)\r\n//post (add items to playlist) /playlists/{playlist_id}/tracks\r\n    //(comma separated)\r\n//post (create playlist) /users/{user_id}/playlists"],"mappings":"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"},"metadata":{},"sourceType":"module"}