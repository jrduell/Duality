{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists, getPlaylistItems, getUserPlaylists, createPlaylist, addPlaylistItems } from '../spotify';\nimport { catchErrors } from '../utils';\nconst CsongIDs = [];\nconst UsongIDs = [];\nconst Overlap = [];\nexport function Playlists() {\n  _s();\n\n  const [CplaylistsData, CsetPlaylistsData] = useState(null);\n  const [Cplaylists, CsetPlaylists] = useState(null);\n  const [UplaylistsData, UsetPlaylistsData] = useState(null);\n  const [Uplaylists, UsetPlaylists] = useState(null);\n  const [Go, setGo] = useState(false);\n  const [Merge, setMerge] = useState(false);\n  const [Create, setCreate] = useState(false);\n  const CPIDS = [];\n  const UPIDS = [];\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"playlists.js\");\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      CsetPlaylists(Cplaylists => [...(Cplaylists ? Cplaylists : []), ...data.items]);\n      CsetPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, []);\n  useEffect(() => {\n    if (!CplaylistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const FetchMoreCData = async () => {\n      if (CplaylistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(CplaylistsData.next);\n        CsetPlaylists(Cplaylists => [...(Cplaylists ? Cplaylists : []), ...data.items]);\n        CsetPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (Cplaylists !== null) {\n          Object.entries(Cplaylists).forEach((key, value) => {\n            const PID = key[1][\"id\"];\n\n            if (!CPIDS.includes(PID)) {\n              CPIDS.push(PID);\n            }\n          });\n\n          for (var PID in CPIDS) {\n            const id = CPIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id);\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!CsongIDs.includes(songID) && songID !== null) {\n                CsongIDs.push(songID);\n              }\n            }); //travel through \"next\" field of listData until end\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"]; //console.log(\"C Before push conditional: \" + songID);\n\n                if (!CsongIDs.includes(songID) && songID !== null) {\n                  CsongIDs.push(songID); //console.log(\"C Push conditional: \" + songID);\n                }\n              }); //UsongIDs.push(listData.data.items);\n            }\n          }\n        }\n\n        console.log(\"go was set\");\n        console.log(\"C size: \" + CsongIDs.length);\n        setGo(true);\n      }\n    }; //catchErrors(fetchMoreData());\n\n\n    catchErrors(FetchMoreCData()); //catchErrors(fetchMoreUdata(fetchMoreData()));\n  }, [CplaylistsData]);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (Go !== false) {\n        const {\n          data\n        } = await getUserPlaylists(\"lauravonbargen\");\n        UsetPlaylists(Uplaylists => [...(Uplaylists ? Uplaylists : []), ...data.items]);\n        console.log(\"why is this called\");\n        UsetPlaylistsData(data);\n      }\n\n      ;\n    };\n\n    catchErrors(fetchData());\n  }, [Go]);\n  useEffect(() => {\n    //prevents running on initial render\n    if (!UplaylistsData) {\n      return;\n    }\n\n    const fetchMoreUData = async () => {\n      if (UplaylistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(UplaylistsData.next);\n        UsetPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        UsetPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (Uplaylists !== null) {\n          Object.entries(Uplaylists).forEach((key, value) => {\n            const PID = key[1][\"id\"]; //console.log(PID);\n\n            if (!UPIDS.includes(PID)) {\n              UPIDS.push(PID);\n            }\n          });\n\n          for (var PID in UPIDS) {\n            const id = UPIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id); //console.log(listData);\n            //handle first set of 100 songs\n\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!UsongIDs.includes(songID) && songID !== null) {\n                UsongIDs.push(songID);\n              }\n            }); //UsongIDs.push(listData.data.items);\n            //iterate through next field, saving songs\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"];\n\n                if (!UsongIDs.includes(songID) && songID !== null) {\n                  UsongIDs.push(songID);\n                }\n              });\n            }\n          }\n\n          console.log(\"C len: \" + CsongIDs.length);\n          console.log(\"U len: \" + UsongIDs.length);\n          setMerge(true);\n        }\n      }\n    };\n\n    catchErrors(fetchMoreUData());\n  }, [UplaylistsData]);\n  useEffect(() => {\n    if (Merge !== false) {\n      for (var i = 0; i < UsongIDs.length; i++) {\n        const index = CsongIDs.indexOf(UsongIDs.at(i));\n\n        if (index !== -1) {\n          //means song is unique and should be added to overlap\n          Overlap.push(UsongIDs.at(i)); //console.log(\"Pushed: \" + CsongIDs[index]);\n\n          console.log(UsongIDs.at(i)); //console.log(\"Overlap size: \" + Overlap.length);\n        }\n      }\n\n      console.log(\"Overlapped:\" + Overlap.length);\n      console.log(\"C IDs: \" + CsongIDs.length);\n      console.log(\"U IDs: \" + UsongIDs.length);\n      console.log(\"1 Overlap: \" + Overlap[0]);\n      setCreate(true);\n    }\n  }, [Merge]);\n  useEffect(() => {\n    //create playlist api call\n    if (Create !== false) {\n      const fetchData = async () => {\n        //create playlist\n        const {\n          data\n        } = await createPlaylist(\"jrduell7\");\n        console.log(\"2 Overlap: \" + Overlap[0]);\n        let total = parseInt(Overlap.length / 100);\n        console.log(Overlap.length); //process in batches of 100\n\n        for (var i = 0; i < total; i++) {\n          let tracks = [];\n          console.log(\"batch 100\");\n\n          for (var j = 0; j < 100; j++) {\n            let track = 'spotify:track:' + Overlap[j + i * 100];\n            tracks.push(track);\n          }\n\n          console.log(\"after batch 100\");\n\n          if (tracks.length !== 0) {\n            console.log(\"don't print this please\");\n            await addPlaylistItems(data.id, tracks);\n          }\n        }\n\n        var last = Overlap.length - total * 100;\n        let tracksTwo = [];\n        console.log(\"before last group\");\n        console.log(\"last: \" + last);\n\n        for (var k = 0; k < last; k++) {\n          let track = \"spotify:track:\" + Overlap[total * 100 + k];\n          tracksTwo.push(track);\n        }\n\n        console.log(\"after last group\");\n\n        if (tracksTwo.length !== 0) {\n          console.log(\"don't print this either\");\n          await addPlaylistItems(data.id, tracksTwo);\n        }\n      };\n\n      catchErrors(fetchData());\n    }\n  }, [Create]);\n}\n\n_s(Playlists, \"wl8U+AzAReADMg/A27dfPFh/kcY=\");\n\n_c = Playlists;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","getCurrentUserPlaylists","getPlaylistItems","getUserPlaylists","createPlaylist","addPlaylistItems","catchErrors","CsongIDs","UsongIDs","Overlap","Playlists","CplaylistsData","CsetPlaylistsData","Cplaylists","CsetPlaylists","UplaylistsData","UsetPlaylistsData","Uplaylists","UsetPlaylists","Go","setGo","Merge","setMerge","Create","setCreate","CPIDS","UPIDS","fetchData","console","log","data","items","FetchMoreCData","next","get","Object","entries","forEach","key","value","PID","includes","push","id","listData","songID","length","fetchMoreUData","playlists","i","index","indexOf","at","total","parseInt","tracks","j","track","last","tracksTwo","k"],"sources":["C:/Users/jrdue/Desktop/Duality/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists, getPlaylistItems, getUserPlaylists, createPlaylist, addPlaylistItems } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n\r\nconst CsongIDs = [];\r\nconst UsongIDs = [];\r\nconst Overlap = [];\r\n\r\nexport function Playlists () {\r\n    const [CplaylistsData, CsetPlaylistsData] = useState(null);\r\n    const [Cplaylists, CsetPlaylists] = useState(null);\r\n\r\n    const [UplaylistsData, UsetPlaylistsData] = useState(null);\r\n    const [Uplaylists, UsetPlaylists] = useState(null);\r\n\r\n    const [Go, setGo] = useState(false);\r\n    const [Merge, setMerge] = useState(false);\r\n    const [Create, setCreate] = useState(false);\r\n\r\n    const CPIDS = [];\r\n    const UPIDS = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        console.log(\"playlists.js\");\r\n        const { data } = await getCurrentUserPlaylists();\r\n        \r\n        CsetPlaylists(Cplaylists => ([\r\n        ...Cplaylists ? Cplaylists : [],\r\n        ...data.items\r\n        ]));\r\n        \r\n        CsetPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!CplaylistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const FetchMoreCData = async () => {\r\n            if (CplaylistsData.next) {\r\n                //as long as there is more data to be retrieved\r\n                const { data } = await axios.get(CplaylistsData.next);\r\n                \r\n                CsetPlaylists(Cplaylists => ([\r\n                    ...Cplaylists ? Cplaylists : [],\r\n                    ...data.items\r\n                    ]));\r\n\r\n                CsetPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(Cplaylists !== null) { \r\n                Object.entries(Cplaylists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    if (!CPIDS.includes(PID)) { \r\n                        CPIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in CPIDS) {\r\n                    const id = CPIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!CsongIDs.includes(songID) && songID !== null) { CsongIDs.push(songID); }\r\n                    });\r\n\r\n                    \r\n                    //travel through \"next\" field of listData until end\r\n\r\n                    while (listData.data.next) {\r\n    \r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            //console.log(\"C Before push conditional: \" + songID);\r\n                            if (!CsongIDs.includes(songID) && songID !== null) { \r\n                                CsongIDs.push(songID); \r\n                                //console.log(\"C Push conditional: \" + songID);\r\n                            }\r\n                        })\r\n                        //UsongIDs.push(listData.data.items);\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"go was set\");\r\n            console.log(\"C size: \" + CsongIDs.length);\r\n            setGo(true);\r\n            }\r\n        };\r\n        \r\n        //catchErrors(fetchMoreData());\r\n    \r\n        catchErrors(FetchMoreCData());\r\n\r\n        //catchErrors(fetchMoreUdata(fetchMoreData()));\r\n    }, [CplaylistsData]);\r\n    \r\n    useEffect(() =>  {\r\n        const fetchData = async () => {\r\n            if (Go !== false) {\r\n                const { data } = await getUserPlaylists(\"lauravonbargen\");\r\n                \r\n                UsetPlaylists(Uplaylists => ([\r\n                ...Uplaylists ? Uplaylists : [],\r\n                ...data.items\r\n                ]));\r\n                console.log(\"why is this called\");\r\n                UsetPlaylistsData(data);\r\n            };\r\n        }\r\n        catchErrors(fetchData());\r\n    }, [Go]);\r\n\r\n    useEffect(() => {\r\n        //prevents running on initial render\r\n        if (!UplaylistsData) { return; }\r\n\r\n        const fetchMoreUData = async () => {\r\n            if (UplaylistsData.next) {\r\n                //as long as there is more data to be retrieved\r\n                const { data } = await axios.get(UplaylistsData.next);\r\n                \r\n                UsetPlaylists(playlists => ([\r\n                    ...playlists ? playlists : [],\r\n                    ...data.items\r\n                    ]));\r\n    \r\n                UsetPlaylistsData(data);\r\n            } else {\r\n                //when all urls are retrieved\r\n                if(Uplaylists !== null) { \r\n                    Object.entries(Uplaylists).forEach((key, value) => {\r\n                        const PID = key[1][\"id\"];\r\n                        //console.log(PID);\r\n                        if (!UPIDS.includes(PID)) { \r\n                            UPIDS.push(PID);\r\n                        }\r\n                    });\r\n                    \r\n                    for (var PID in UPIDS) {\r\n                        const id = UPIDS[PID];\r\n                        \r\n                        //data contains first 100 songs\r\n                        let listData = await getPlaylistItems(id);\r\n                        //console.log(listData);\r\n                        \r\n\r\n                        //handle first set of 100 songs\r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!UsongIDs.includes(songID) && songID !== null) { UsongIDs.push(songID); }\r\n                        });\r\n\r\n                        //UsongIDs.push(listData.data.items);\r\n                        \r\n                        //iterate through next field, saving songs\r\n                        while (listData.data.next) {\r\n    \r\n                            listData = await axios.get(listData.data.next);\r\n                            \r\n                            Object.entries(listData.data.items).forEach((key, value) => {\r\n                                const songID = key[1][\"track\"][\"id\"];\r\n\r\n                                if (!UsongIDs.includes(songID) && songID !== null) { \r\n                                    UsongIDs.push(songID); \r\n                                }\r\n                            })\r\n                        }\r\n                    } \r\n\r\n                    console.log(\"C len: \" + CsongIDs.length);\r\n                    console.log(\"U len: \" + UsongIDs.length);\r\n                    \r\n                    setMerge(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        catchErrors(fetchMoreUData());\r\n    }, [UplaylistsData]);\r\n    \r\n    useEffect(() => {\r\n        if (Merge !== false) {\r\n            for (var i = 0; i < UsongIDs.length; i++) {\r\n                const index = CsongIDs.indexOf(UsongIDs.at(i));\r\n\r\n                if (index !== -1) {\r\n                    //means song is unique and should be added to overlap\r\n                    Overlap.push(UsongIDs.at(i));\r\n                    //console.log(\"Pushed: \" + CsongIDs[index]);\r\n                    console.log(UsongIDs.at(i));\r\n                    //console.log(\"Overlap size: \" + Overlap.length);\r\n                }\r\n            }\r\n\r\n            console.log(\"Overlapped:\" + Overlap.length);\r\n            console.log(\"C IDs: \" + CsongIDs.length);\r\n            console.log(\"U IDs: \" + UsongIDs.length);\r\n            console.log(\"1 Overlap: \" + Overlap[0]);\r\n            setCreate(true);\r\n        }\r\n    }, [Merge]);\r\n\r\n    useEffect(() => {\r\n        //create playlist api call\r\n\r\n        if (Create !== false) {\r\n\r\n            const fetchData = async () => {\r\n                //create playlist\r\n                const { data } = await createPlaylist(\"jrduell7\");\r\n                \r\n                console.log(\"2 Overlap: \" + Overlap[0]);\r\n                let total = parseInt(Overlap.length / 100);\r\n                console.log(Overlap.length);\r\n\r\n                //process in batches of 100\r\n                \r\n                for (var i = 0; i < total; i++) {\r\n                    let tracks = [];\r\n                    console.log(\"batch 100\");\r\n                    for (var j = 0; j < 100; j++) {\r\n                        let track = 'spotify:track:' + Overlap[j + (i*100)];\r\n                        tracks.push(track);\r\n                    }\r\n                    console.log(\"after batch 100\");\r\n                    if ((tracks.length !== 0)){ \r\n                        console.log(\"don't print this please\")\r\n                        await addPlaylistItems(data.id, tracks); \r\n                    }\r\n                }\r\n\r\n                var last = Overlap.length - (total * 100);\r\n                let tracksTwo = [];\r\n                console.log(\"before last group\");\r\n                console.log(\"last: \" + last);\r\n                for (var k = 0; k < last; k++) {\r\n                    let track = \"spotify:track:\" + Overlap[(total*100) + k];\r\n                    tracksTwo.push(track);\r\n                }\r\n                console.log(\"after last group\");\r\n                \r\n                if ((tracksTwo.length !== 0)){ \r\n                    console.log(\"don't print this either\");\r\n                    await addPlaylistItems(data.id, tracksTwo);\r\n                 }\r\n            } \r\n\r\n            catchErrors(fetchData());\r\n        }\r\n    }, [Create]);  \r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}