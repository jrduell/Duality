{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils'; //import { ChangeContext } from '../contexts/context';\n\nexport const Playlists = () => {\n  _s();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylistsData(data);\n    }; //console.log(playlistsData);\n\n\n    catchErrors(fetchData());\n  }, []); // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylistsData(data);\n      }\n    };\n\n    console.log(playlists);\n\n    if (playlists !== null) {\n      Object.entries(playlists).forEach(_ref => {\n        let [key, value] = _ref;\n        console.log(`${key} : ${value}`);\n      });\n    } // Use functional update to update playlists state variable\n    // to avoid including playlists as a dependency for this hook\n    // and creating an infinite loop\n\n\n    setPlaylists(playlists => [...(playlists ? playlists : []), ...playlistsData.items]); // usually will not get to here\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  const [songs, setSongs] = useState(null);\n  /*\r\n    useEffect(() => {\r\n      console.log(playlists);\r\n      Object.entries(playlists).forEach(([key,value]) => {\r\n          console.log(`${key} : ${value}`);\r\n      });\r\n      console.log('-----------------------------');\r\n    }, [playlistsData]);\r\n  */\n\n  return;\n};\n\n_s(Playlists, \"oi8qk5mGcbXUrpQntJnHScIGDz0=\");\n\n_c = Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","catchErrors","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","fetchData","data","fetchMoreData","next","get","console","log","Object","entries","forEach","key","value","items","songs","setSongs"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n\r\nexport const Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  useEffect(() =>  {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      setPlaylistsData(data);\r\n    };\r\n    //console.log(playlistsData);\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        const { data } = await axios.get(playlistsData.next);\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n    console.log(playlists);\r\n    if(playlists !== null) {\r\n        Object.entries(playlists).forEach(([key,value]) => {\r\n            console.log(`${key} : ${value}`);\r\n        })\r\n    }\r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n\r\n    \r\n    // usually will not get to here\r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n  const [songs, setSongs] = useState(null);\r\n/*\r\n  useEffect(() => {\r\n    console.log(playlists);\r\n    Object.entries(playlists).forEach(([key,value]) => {\r\n        console.log(`${key} : ${value}`);\r\n    });\r\n    console.log('-----------------------------');\r\n  }, [playlistsData]);\r\n*/\r\n  return;\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,QAAwC,YAAxC;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CACA;;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAC7B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,IAAD,CAAlD;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;EAEAC,SAAS,CAAC,MAAO;IACf,MAAMS,SAAS,GAAG,YAAY;MAC5B,MAAM;QAAEC;MAAF,IAAW,MAAMR,uBAAuB,EAA9C;MACAI,gBAAgB,CAACI,IAAD,CAAhB;IACD,CAHD,CADe,CAKf;;;IACAP,WAAW,CAACM,SAAS,EAAV,CAAX;EACD,CAPQ,EAON,EAPM,CAAT,CAJ6B,CAa7B;EACA;;EACAT,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,aAAL,EAAoB;MAClB;IACD,CAHa,CAKd;IACA;;;IACA,MAAMM,aAAa,GAAG,YAAY;MAChC,IAAIN,aAAa,CAACO,IAAlB,EAAwB;QACtB,MAAM;UAAEF;QAAF,IAAW,MAAMT,KAAK,CAACY,GAAN,CAAUR,aAAa,CAACO,IAAxB,CAAvB;QACAN,gBAAgB,CAACI,IAAD,CAAhB;MACD;IACF,CALD;;IAMAI,OAAO,CAACC,GAAR,CAAYR,SAAZ;;IACA,IAAGA,SAAS,KAAK,IAAjB,EAAuB;MACnBS,MAAM,CAACC,OAAP,CAAeV,SAAf,EAA0BW,OAA1B,CAAkC,QAAiB;QAAA,IAAhB,CAACC,GAAD,EAAKC,KAAL,CAAgB;QAC/CN,OAAO,CAACC,GAAR,CAAa,GAAEI,GAAI,MAAKC,KAAM,EAA9B;MACH,CAFD;IAGH,CAlBa,CAmBd;IACA;IACA;;;IACAZ,YAAY,CAACD,SAAS,IAAK,CACzB,IAAGA,SAAS,GAAGA,SAAH,GAAe,EAA3B,CADyB,EAEzB,GAAGF,aAAa,CAACgB,KAFQ,CAAf,CAAZ,CAtBc,CA4Bd;;IACAlB,WAAW,CAACQ,aAAa,EAAd,CAAX;EAED,CA/BQ,EA+BN,CAACN,aAAD,CA/BM,CAAT;EAiCA,MAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,IAAD,CAAlC;EACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;AACD,CA3DM;;GAAMK,S;;KAAAA,S"},"metadata":{},"sourceType":"module"}