{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists, getPlaylistItems } from '../spotify';\nimport { catchErrors } from '../utils'; //import { ChangeContext } from '../contexts/context';\n\nexport const Playlists = () => {\n  _s();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const [playlistCount, setPlaylistCount] = useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylistsData(data);\n    }; //console.log(playlistsData);\n\n\n    catchErrors(fetchData());\n  }, []); // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        console.log(playlistsData.next);\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        setPlaylistsData(data);\n      }\n    }; // Use functional update to update playlists state variable\n    // to avoid including playlists as a dependency for this hook\n    // and creating an infinite loop\n\n    /*\r\n        setPlaylists(playlists => ([\r\n          ...playlists ? playlists : [],\r\n          ...playlistsData.items\r\n        ]));\r\n    */\n    //setPlaylistCount(playlistsData.items.length);\n    // usually will not get to here\n\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  const URLS = [];\n  const [didFinish, setDidFinish] = useState(false); //extract playlist urls into URLS array\n\n  useEffect(() => {\n    if (playlists !== null) {\n      //console.log(playlists);\n      Object.entries(playlists).forEach((key, value) => {\n        const url = key[1][\"external_urls\"][\"spotify\"];\n\n        if (!URLS.includes(url)) {\n          URLS.push(url);\n        }\n      });\n    }\n\n    console.log('-----------------------------');\n  }, [playlists]); //for each playlist, retrieve song urls\n\n  const songs = [];\n  useEffect(() => {\n    const fetchData = async () => {//logic\n    };\n  });\n  return;\n};\n\n_s(Playlists, \"G4vmPcDiYfWPEQs+8PdNd0M2Cko=\");\n\n_c = Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","getPlaylistItems","catchErrors","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","playlistCount","setPlaylistCount","fetchData","data","fetchMoreData","next","console","log","get","items","URLS","didFinish","setDidFinish","Object","entries","forEach","key","value","url","includes","push","songs"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists, getPlaylistItems } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n\r\nexport const Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n  const [playlistCount, setPlaylistCount] = useState(0);\r\n\r\n  useEffect(() =>  {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n\r\n      setPlaylistsData(data);\r\n    };\r\n    //console.log(playlistsData);\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        console.log(playlistsData.next);\r\n        const { data } = await axios.get(playlistsData.next);\r\n\r\n        setPlaylists(playlists => ([\r\n            ...playlists ? playlists : [],\r\n            ...data.items\r\n          ]));\r\n\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n    \r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n\r\n/*\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n*/   \r\n    //setPlaylistCount(playlistsData.items.length);\r\n    // usually will not get to here\r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n  const URLS = [];\r\n  const [didFinish, setDidFinish] = useState(false);\r\n\r\n  //extract playlist urls into URLS array\r\n  useEffect(() => {\r\n    if(playlists !== null) { \r\n        //console.log(playlists);\r\n        Object.entries(playlists).forEach((key, value) => {\r\n            const url = key[1][\"external_urls\"][\"spotify\"];\r\n            if (!URLS.includes(url)) { \r\n                URLS.push(url);\r\n            }\r\n        });\r\n    }\r\n    console.log('-----------------------------');\r\n  }, [playlists]);\r\n\r\n  //for each playlist, retrieve song urls\r\n  const songs = [];\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n        //logic\r\n    }\r\n  });\r\n\r\n  return;\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,EAAkCC,gBAAlC,QAA0D,YAA1D;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CACA;;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAC7B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD;EACA,MAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,CAAD,CAAlD;EAEAC,SAAS,CAAC,MAAO;IACf,MAAMY,SAAS,GAAG,YAAY;MAC5B,MAAM;QAAEC;MAAF,IAAW,MAAMX,uBAAuB,EAA9C;MAEAK,gBAAgB,CAACM,IAAD,CAAhB;IACD,CAJD,CADe,CAMf;;;IACAT,WAAW,CAACQ,SAAS,EAAV,CAAX;EACD,CARQ,EAQN,EARM,CAAT,CAL6B,CAe7B;EACA;;EACAZ,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,aAAL,EAAoB;MAClB;IACD,CAHa,CAKd;IACA;;;IACA,MAAMQ,aAAa,GAAG,YAAY;MAChC,IAAIR,aAAa,CAACS,IAAlB,EAAwB;QACtBC,OAAO,CAACC,GAAR,CAAYX,aAAa,CAACS,IAA1B;QACA,MAAM;UAAEF;QAAF,IAAW,MAAMZ,KAAK,CAACiB,GAAN,CAAUZ,aAAa,CAACS,IAAxB,CAAvB;QAEAN,YAAY,CAACD,SAAS,IAAK,CACvB,IAAGA,SAAS,GAAGA,SAAH,GAAe,EAA3B,CADuB,EAEvB,GAAGK,IAAI,CAACM,KAFe,CAAf,CAAZ;QAKAZ,gBAAgB,CAACM,IAAD,CAAhB;MACD;IACF,CAZD,CAPc,CAqBd;IACA;IACA;;IAEJ;AACA;AACA;AACA;AACA;AACA;IACI;IACA;;;IACAT,WAAW,CAACU,aAAa,EAAd,CAAX;EAED,CAnCQ,EAmCN,CAACR,aAAD,CAnCM,CAAT;EAqCA,MAAMc,IAAI,GAAG,EAAb;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,KAAD,CAA1C,CAvD6B,CAyD7B;;EACAC,SAAS,CAAC,MAAM;IACd,IAAGQ,SAAS,KAAK,IAAjB,EAAuB;MACnB;MACAe,MAAM,CAACC,OAAP,CAAehB,SAAf,EAA0BiB,OAA1B,CAAkC,CAACC,GAAD,EAAMC,KAAN,KAAgB;QAC9C,MAAMC,GAAG,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAO,eAAP,EAAwB,SAAxB,CAAZ;;QACA,IAAI,CAACN,IAAI,CAACS,QAAL,CAAcD,GAAd,CAAL,EAAyB;UACrBR,IAAI,CAACU,IAAL,CAAUF,GAAV;QACH;MACJ,CALD;IAMH;;IACDZ,OAAO,CAACC,GAAR,CAAY,+BAAZ;EACD,CAXQ,EAWN,CAACT,SAAD,CAXM,CAAT,CA1D6B,CAuE7B;;EACA,MAAMuB,KAAK,GAAG,EAAd;EACA/B,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,YAAY,CAC1B;IACH,CAFD;EAGD,CAJQ,CAAT;EAMA;AACD,CAhFM;;GAAMP,S;;KAAAA,S"},"metadata":{},"sourceType":"module"}