{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists, getPlaylistItems, getUserPlaylists, createPlaylist, addPlaylistItems } from '../spotify';\nimport { catchErrors } from '../utils'; //import { ChangeContext } from '../contexts/context';\n//top level function\n\n/*\r\nexport const MergePlaylists = () => {\r\n\r\n    const CurrentSongList = CurrentPlaylists();\r\n    //const UserSongList = UserPlaylists(\"lauravonbargen\");\r\n\r\n/*\r\n    const fetchData = async () => {\r\n        const { data1 } = await CurrentPlaylists();\r\n        const { data2 } = await UserPlaylists();\r\n    }\r\n\r\n    \r\n}\r\n*/\n\nfunction findOverlap(CurrentSongs, UserSongs) {\n  let overlap = [];\n\n  for (var i = 0; i < UserSongs.length; i++) {\n    const index = CurrentSongs.indexOf(UserSongs[i]);\n\n    if (index === -1) {\n      //means song is unique and should be added to overlap\n      overlap.push(CurrentSongs[index]);\n    }\n  }\n\n  console.log(\"Overlap: \" + overlap.length);\n}\n\nconst CsongIDs = [];\nconst UsongIDs = [];\nconst Overlap = [];\nexport const Playlists = () => {\n  _s();\n\n  const [CplaylistsData, CsetPlaylistsData] = useState(null);\n  const [Cplaylists, CsetPlaylists] = useState(null);\n  const [UplaylistsData, UsetPlaylistsData] = useState(null);\n  const [Uplaylists, UsetPlaylists] = useState(null);\n  const [Go, setGo] = useState(false);\n  const [Merge, setMerge] = useState(false);\n  const [Create, setCreate] = useState(false);\n  const CPIDS = []; //const CsongIDs = [];\n  //const CsongIDs = useRef([]);\n\n  const UPIDS = []; //const UsongIDs = [];\n  //const UsongIDs = useRef([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      CsetPlaylists(Cplaylists => [...(Cplaylists ? Cplaylists : []), ...data.items]);\n      CsetPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, []);\n  useEffect(() => {\n    if (!CplaylistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const FetchMoreCData = async () => {\n      if (CplaylistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(CplaylistsData.next);\n        CsetPlaylists(Cplaylists => [...(Cplaylists ? Cplaylists : []), ...data.items]);\n        CsetPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (Cplaylists !== null) {\n          Object.entries(Cplaylists).forEach((key, value) => {\n            const PID = key[1][\"id\"];\n\n            if (!CPIDS.includes(PID)) {\n              CPIDS.push(PID);\n            }\n          });\n\n          for (var PID in CPIDS) {\n            const id = CPIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id);\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!CsongIDs.includes(songID) && songID !== null) {\n                CsongIDs.push(songID);\n              }\n            }); //travel through \"next\" field of listData until end\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"]; //console.log(\"C Before push conditional: \" + songID);\n\n                if (!CsongIDs.includes(songID) && songID !== null) {\n                  CsongIDs.push(songID); //console.log(\"C Push conditional: \" + songID);\n                }\n              }); //UsongIDs.push(listData.data.items);\n            }\n          }\n        }\n\n        console.log(\"go was set\");\n        console.log(\"C size: \" + CsongIDs.length);\n        setGo(true);\n      }\n    }; //catchErrors(fetchMoreData());\n\n\n    catchErrors(FetchMoreCData()); //catchErrors(fetchMoreUdata(fetchMoreData()));\n  }, [CplaylistsData]);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (Go !== false) {\n        const {\n          data\n        } = await getUserPlaylists(\"1214092342\");\n        UsetPlaylists(Uplaylists => [...(Uplaylists ? Uplaylists : []), ...data.items]);\n        console.log(\"why is this called\");\n        UsetPlaylistsData(data);\n      }\n\n      ;\n    };\n\n    catchErrors(fetchData());\n  }, [Go]);\n  useEffect(() => {\n    //prevents running on initial render\n    if (!UplaylistsData) {\n      return;\n    }\n\n    const fetchMoreUData = async () => {\n      if (UplaylistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(UplaylistsData.next);\n        UsetPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        UsetPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (Uplaylists !== null) {\n          Object.entries(Uplaylists).forEach((key, value) => {\n            const PID = key[1][\"id\"]; //console.log(PID);\n\n            if (!UPIDS.includes(PID)) {\n              UPIDS.push(PID);\n            }\n          });\n\n          for (var PID in UPIDS) {\n            const id = UPIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id); //console.log(listData);\n            //handle first set of 100 songs\n\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!UsongIDs.includes(songID) && songID !== null) {\n                UsongIDs.push(songID);\n              }\n            }); //UsongIDs.push(listData.data.items);\n            //iterate through next field, saving songs\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"]; //console.log(\"Before push conditional: \" + songID);\n\n                if (!UsongIDs.includes(songID) && songID !== null) {\n                  UsongIDs.push(songID); //console.log(\"Push conditional: \" + songID);\n                }\n              }); //UsongIDs.push(listData.data.items);\n            }\n          }\n\n          console.log(\"C len: \" + CsongIDs.length);\n          console.log(\"U len: \" + UsongIDs.length);\n\n          for (var i = 0; i < UsongIDs.length; i++) {//console.log(\"U ids: \" + UsongIDs[i]);\n          }\n\n          for (var i = 0; i < CsongIDs.length; i++) {//console.log(\"C ids: \" + CsongIDs[i]);\n          }\n\n          setMerge(true);\n        }\n      }\n    };\n\n    catchErrors(fetchMoreUData());\n  }, [UplaylistsData]);\n  useEffect(() => {\n    if (Merge !== false) {\n      for (var i = 0; i < UsongIDs.length; i++) {\n        const index = CsongIDs.indexOf(UsongIDs[i]);\n\n        if (index === -1) {\n          //means song is unique and should be added to overlap\n          Overlap.push(CsongIDs[index]); //console.log(\"Pushed: \" + CsongIDs[index]);\n          //console.log(\"Overlap size: \" + Overlap.length);\n        }\n      }\n\n      console.log(\"Overlapped:\" + Overlap.length);\n      console.log(\"C IDs: \" + CsongIDs.length);\n      console.log(\"U IDs: \" + UsongIDs.length);\n      setCreate(true);\n    }\n  }, [Merge]);\n  useEffect(() => {\n    //create playlist api call\n    if (Create !== false) {\n      const fetchData = async () => {\n        //create playlist\n        const {\n          data\n        } = await createPlaylist(\"jrduell7\");\n        console.log(data); //cast to double\n\n        let total = parseInt(Overlap.length / 100); //process in batches of 100\n\n        for (var i = 0; i < total; i++) {\n          let tracks = \"[\";\n\n          for (var j = 0; j < 100; j++) {\n            tracks = tracks + \",\" + Overlap[j + i * 100];\n          }\n\n          tracks = tracks + \"]\"; //addPlaylistItems(data.id, tracks);\n        }\n\n        var last = Overlap.length - total * 100;\n        let tracks = \"[\";\n\n        for (var i = 0; i < last; i++) {\n          tracks = tracks + \",\" + Overlap[total * 100 + i];\n        }\n\n        tracks = tracks + \"]\"; //addPlaylistItems(data.id, tracks);\n      };\n    }\n  }, [Create]);\n};\n/*\r\nexport const CurrentPlaylists = () => {\r\n    const [playlistsData, setPlaylistsData] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n\r\n    const PIDS = [];\r\n    const songIDs = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getCurrentUserPlaylists();\r\n        \r\n        setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n        ]));\r\n        console.log(\"curlen\" + data.length);\r\n        setPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n    /*\r\n    useEffect(() => {\r\n        if (!playlistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const fetchMoreData = async () => {\r\n            if (playlistsData.next) {\r\n            //as long as there is more data to be retrieved\r\n            const { data } = await axios.get(playlistsData.next);\r\n            \r\n            setPlaylists(playlists => ([\r\n                ...playlists ? playlists : [],\r\n                ...data.items\r\n                ]));\r\n\r\n            setPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(playlists !== null) { \r\n                Object.entries(playlists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    //console.log(PID);\r\n                    if (!PIDS.includes(PID)) { \r\n                        PIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in PIDS) {\r\n                    const id = PIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    //console.log(listData);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    });\r\n                    //console.log(\"before while: \" + i);\r\n                    songIDs.push(listData.data.items);\r\n                    \r\n                    while (listData.data.next) {\r\n\r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                        })\r\n                        songIDs.push(listData.data.items);\r\n                        \r\n                    }\r\n\r\n                }\r\n                return songIDs;\r\n                \r\n            }\r\n            }\r\n        };\r\n        \r\n        catchErrors(fetchMoreData());\r\n\r\n        }, [playlistsData]);\r\n    \r\n};\r\n\r\nconst UserPlaylists = (userName) => {\r\n    const [playlistsData, setPlaylistsData] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n\r\n    const PIDS = [];\r\n    const songIDs = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getUserPlaylists(userName);\r\n        \r\n        setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n        ]));\r\n\r\n        setPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!playlistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const fetchMoreData = async () => {\r\n            if (playlistsData.next) {\r\n            //as long as there is more data to be retrieved\r\n            const { data } = await axios.get(playlistsData.next);\r\n            \r\n            setPlaylists(playlists => ([\r\n                ...playlists ? playlists : [],\r\n                ...data.items\r\n                ]));\r\n\r\n            setPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(playlists !== null) { \r\n                Object.entries(playlists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    //console.log(PID);\r\n                    if (!PIDS.includes(PID)) { \r\n                        PIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in PIDS) {\r\n                    const id = PIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    //console.log(listData);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    });\r\n                    //console.log(\"before while: \" + i);\r\n                    songIDs.push(listData.data.items);\r\n                    \r\n                    while (listData.data.next) {\r\n\r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                        })\r\n                        songIDs.push(listData.data.items);\r\n                        \r\n                    }\r\n                }\r\n                \r\n                return songIDs;\r\n            }\r\n            }\r\n        };\r\n        \r\n        catchErrors(fetchMoreData());\r\n\r\n        }, [playlistsData]);\r\n};\r\n*/\n\n_s(Playlists, \"wl8U+AzAReADMg/A27dfPFh/kcY=\");\n\n_c = Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","getCurrentUserPlaylists","getPlaylistItems","getUserPlaylists","createPlaylist","addPlaylistItems","catchErrors","findOverlap","CurrentSongs","UserSongs","overlap","i","length","index","indexOf","push","console","log","CsongIDs","UsongIDs","Overlap","Playlists","CplaylistsData","CsetPlaylistsData","Cplaylists","CsetPlaylists","UplaylistsData","UsetPlaylistsData","Uplaylists","UsetPlaylists","Go","setGo","Merge","setMerge","Create","setCreate","CPIDS","UPIDS","fetchData","data","items","FetchMoreCData","next","get","Object","entries","forEach","key","value","PID","includes","id","listData","songID","fetchMoreUData","playlists","total","parseInt","tracks","j","last"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists, getPlaylistItems, getUserPlaylists, createPlaylist, addPlaylistItems } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n//top level function\r\n/*\r\nexport const MergePlaylists = () => {\r\n\r\n    const CurrentSongList = CurrentPlaylists();\r\n    //const UserSongList = UserPlaylists(\"lauravonbargen\");\r\n\r\n/*\r\n    const fetchData = async () => {\r\n        const { data1 } = await CurrentPlaylists();\r\n        const { data2 } = await UserPlaylists();\r\n    }\r\n\r\n    \r\n}\r\n*/\r\n\r\n\r\nfunction findOverlap(CurrentSongs, UserSongs) {\r\n    let overlap = [];\r\n\r\n    for (var i = 0; i < UserSongs.length; i++) {\r\n        const index = CurrentSongs.indexOf(UserSongs[i]);\r\n        if (index === -1) {\r\n            //means song is unique and should be added to overlap\r\n            overlap.push(CurrentSongs[index]);\r\n        }\r\n    }\r\n    console.log(\"Overlap: \" + overlap.length);\r\n}\r\n\r\nconst CsongIDs = [];\r\nconst UsongIDs = [];\r\nconst Overlap = [];\r\n\r\nexport const Playlists = () => {\r\n    const [CplaylistsData, CsetPlaylistsData] = useState(null);\r\n    const [Cplaylists, CsetPlaylists] = useState(null);\r\n\r\n    const [UplaylistsData, UsetPlaylistsData] = useState(null);\r\n    const [Uplaylists, UsetPlaylists] = useState(null);\r\n\r\n    const [Go, setGo] = useState(false);\r\n    const [Merge, setMerge] = useState(false);\r\n    const [Create, setCreate] = useState(false);\r\n\r\n    const CPIDS = [];\r\n    //const CsongIDs = [];\r\n    //const CsongIDs = useRef([]);\r\n\r\n    const UPIDS = [];\r\n    //const UsongIDs = [];\r\n    //const UsongIDs = useRef([]);\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getCurrentUserPlaylists();\r\n        \r\n        CsetPlaylists(Cplaylists => ([\r\n        ...Cplaylists ? Cplaylists : [],\r\n        ...data.items\r\n        ]));\r\n        \r\n        CsetPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!CplaylistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const FetchMoreCData = async () => {\r\n            if (CplaylistsData.next) {\r\n                //as long as there is more data to be retrieved\r\n                const { data } = await axios.get(CplaylistsData.next);\r\n                \r\n                CsetPlaylists(Cplaylists => ([\r\n                    ...Cplaylists ? Cplaylists : [],\r\n                    ...data.items\r\n                    ]));\r\n\r\n                CsetPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(Cplaylists !== null) { \r\n                Object.entries(Cplaylists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    if (!CPIDS.includes(PID)) { \r\n                        CPIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in CPIDS) {\r\n                    const id = CPIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!CsongIDs.includes(songID) && songID !== null) { CsongIDs.push(songID); }\r\n                    });\r\n\r\n                    \r\n                    //travel through \"next\" field of listData until end\r\n\r\n                    while (listData.data.next) {\r\n    \r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            //console.log(\"C Before push conditional: \" + songID);\r\n                            if (!CsongIDs.includes(songID) && songID !== null) { \r\n                                CsongIDs.push(songID); \r\n                                //console.log(\"C Push conditional: \" + songID);\r\n                            }\r\n                        })\r\n                        //UsongIDs.push(listData.data.items);\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"go was set\");\r\n            console.log(\"C size: \" + CsongIDs.length);\r\n            setGo(true);\r\n            }\r\n        };\r\n        \r\n        //catchErrors(fetchMoreData());\r\n    \r\n        catchErrors(FetchMoreCData());\r\n\r\n        //catchErrors(fetchMoreUdata(fetchMoreData()));\r\n    }, [CplaylistsData]);\r\n    \r\n    useEffect(() =>  {\r\n        const fetchData = async () => {\r\n            if (Go !== false) {\r\n                const { data } = await getUserPlaylists(\"1214092342\");\r\n                \r\n                UsetPlaylists(Uplaylists => ([\r\n                ...Uplaylists ? Uplaylists : [],\r\n                ...data.items\r\n                ]));\r\n                console.log(\"why is this called\");\r\n                UsetPlaylistsData(data);\r\n            };\r\n        }\r\n        catchErrors(fetchData());\r\n    }, [Go]);\r\n\r\n    useEffect(() => {\r\n        //prevents running on initial render\r\n        if (!UplaylistsData) { return; }\r\n\r\n        const fetchMoreUData = async () => {\r\n            if (UplaylistsData.next) {\r\n                //as long as there is more data to be retrieved\r\n                const { data } = await axios.get(UplaylistsData.next);\r\n                \r\n                UsetPlaylists(playlists => ([\r\n                    ...playlists ? playlists : [],\r\n                    ...data.items\r\n                    ]));\r\n    \r\n                UsetPlaylistsData(data);\r\n            } else {\r\n                //when all urls are retrieved\r\n                if(Uplaylists !== null) { \r\n                    Object.entries(Uplaylists).forEach((key, value) => {\r\n                        const PID = key[1][\"id\"];\r\n                        //console.log(PID);\r\n                        if (!UPIDS.includes(PID)) { \r\n                            UPIDS.push(PID);\r\n                        }\r\n                    });\r\n                    \r\n                    for (var PID in UPIDS) {\r\n                        const id = UPIDS[PID];\r\n                        \r\n                        //data contains first 100 songs\r\n                        let listData = await getPlaylistItems(id);\r\n                        //console.log(listData);\r\n                        \r\n\r\n                        //handle first set of 100 songs\r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!UsongIDs.includes(songID) && songID !== null) { UsongIDs.push(songID); }\r\n                        });\r\n\r\n                        //UsongIDs.push(listData.data.items);\r\n                        \r\n                        //iterate through next field, saving songs\r\n                        while (listData.data.next) {\r\n    \r\n                            listData = await axios.get(listData.data.next);\r\n                            \r\n                            Object.entries(listData.data.items).forEach((key, value) => {\r\n                                const songID = key[1][\"track\"][\"id\"];\r\n                                //console.log(\"Before push conditional: \" + songID);\r\n                                if (!UsongIDs.includes(songID) && songID !== null) { \r\n                                    UsongIDs.push(songID); \r\n                                    //console.log(\"Push conditional: \" + songID);\r\n                                }\r\n                            })\r\n                            //UsongIDs.push(listData.data.items);\r\n                        }\r\n                    } \r\n\r\n                    console.log(\"C len: \" + CsongIDs.length);\r\n                    console.log(\"U len: \" + UsongIDs.length);\r\n                    \r\n                    for (var i = 0; i < UsongIDs.length; i++) {\r\n                        //console.log(\"U ids: \" + UsongIDs[i]);\r\n                    }\r\n\r\n                    for (var i = 0; i < CsongIDs.length; i++) {\r\n                        //console.log(\"C ids: \" + CsongIDs[i]);\r\n                    }\r\n                    \r\n                    setMerge(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        catchErrors(fetchMoreUData());\r\n    }, [UplaylistsData]);\r\n    \r\n    useEffect(() => {\r\n        if (Merge !== false) {\r\n            for (var i = 0; i < UsongIDs.length; i++) {\r\n                const index = CsongIDs.indexOf(UsongIDs[i]);\r\n\r\n                if (index === -1) {\r\n                    //means song is unique and should be added to overlap\r\n                    Overlap.push(CsongIDs[index]);\r\n                    //console.log(\"Pushed: \" + CsongIDs[index]);\r\n                    //console.log(\"Overlap size: \" + Overlap.length);\r\n                }\r\n            }\r\n\r\n            console.log(\"Overlapped:\" + Overlap.length);\r\n            console.log(\"C IDs: \" + CsongIDs.length);\r\n            console.log(\"U IDs: \" + UsongIDs.length);\r\n            \r\n            setCreate(true);\r\n        }\r\n    }, [Merge]);\r\n\r\n    useEffect(() => {\r\n        //create playlist api call\r\n\r\n        if (Create !== false) {\r\n\r\n            const fetchData = async () => {\r\n                //create playlist\r\n                const { data } = await createPlaylist(\"jrduell7\");\r\n                console.log(data);\r\n                //cast to double\r\n                let total = parseInt(Overlap.length / 100);\r\n                \r\n                //process in batches of 100\r\n                for (var i = 0; i < total; i++) {\r\n                    let tracks = \"[\";\r\n                    for (var j = 0; j < 100; j++) {\r\n                        tracks = tracks + \",\" + Overlap[j + (i*100)];\r\n                    }\r\n                    tracks = tracks + \"]\";\r\n                    //addPlaylistItems(data.id, tracks);\r\n                }\r\n\r\n                var last = Overlap.length - (total * 100);\r\n                let tracks = \"[\";\r\n                for (var i = 0; i < last; i++) {\r\n                    tracks = tracks + \",\" + Overlap[(total*100) + i];\r\n                }\r\n                tracks = tracks + \"]\";\r\n                //addPlaylistItems(data.id, tracks);\r\n            } \r\n        }\r\n    }, [Create]);\r\n    \r\n};\r\n\r\n\r\n/*\r\nexport const CurrentPlaylists = () => {\r\n    const [playlistsData, setPlaylistsData] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n\r\n    const PIDS = [];\r\n    const songIDs = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getCurrentUserPlaylists();\r\n        \r\n        setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n        ]));\r\n        console.log(\"curlen\" + data.length);\r\n        setPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n    /*\r\n    useEffect(() => {\r\n        if (!playlistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const fetchMoreData = async () => {\r\n            if (playlistsData.next) {\r\n            //as long as there is more data to be retrieved\r\n            const { data } = await axios.get(playlistsData.next);\r\n            \r\n            setPlaylists(playlists => ([\r\n                ...playlists ? playlists : [],\r\n                ...data.items\r\n                ]));\r\n\r\n            setPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(playlists !== null) { \r\n                Object.entries(playlists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    //console.log(PID);\r\n                    if (!PIDS.includes(PID)) { \r\n                        PIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in PIDS) {\r\n                    const id = PIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    //console.log(listData);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    });\r\n                    //console.log(\"before while: \" + i);\r\n                    songIDs.push(listData.data.items);\r\n                    \r\n                    while (listData.data.next) {\r\n\r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                        })\r\n                        songIDs.push(listData.data.items);\r\n                        \r\n                    }\r\n\r\n                }\r\n                return songIDs;\r\n                \r\n            }\r\n            }\r\n        };\r\n        \r\n        catchErrors(fetchMoreData());\r\n\r\n        }, [playlistsData]);\r\n    \r\n};\r\n\r\nconst UserPlaylists = (userName) => {\r\n    const [playlistsData, setPlaylistsData] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n\r\n    const PIDS = [];\r\n    const songIDs = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getUserPlaylists(userName);\r\n        \r\n        setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n        ]));\r\n\r\n        setPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!playlistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const fetchMoreData = async () => {\r\n            if (playlistsData.next) {\r\n            //as long as there is more data to be retrieved\r\n            const { data } = await axios.get(playlistsData.next);\r\n            \r\n            setPlaylists(playlists => ([\r\n                ...playlists ? playlists : [],\r\n                ...data.items\r\n                ]));\r\n\r\n            setPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(playlists !== null) { \r\n                Object.entries(playlists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    //console.log(PID);\r\n                    if (!PIDS.includes(PID)) { \r\n                        PIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in PIDS) {\r\n                    const id = PIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    //console.log(listData);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    });\r\n                    //console.log(\"before while: \" + i);\r\n                    songIDs.push(listData.data.items);\r\n                    \r\n                    while (listData.data.next) {\r\n\r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                        })\r\n                        songIDs.push(listData.data.items);\r\n                        \r\n                    }\r\n                }\r\n                \r\n                return songIDs;\r\n            }\r\n            }\r\n        };\r\n        \r\n        catchErrors(fetchMoreData());\r\n\r\n        }, [playlistsData]);\r\n};\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}