{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jrdue\\\\Desktop\\\\Current\\\\app\\\\src\\\\dataCollecting\\\\playlists.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils';\nimport { ChangeContext } from '../contexts/context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Playlists = () => {\n  _s();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const {\n    didChange\n  } = useContext(ChangeContext);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, [didChange]); // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylistsData(data);\n      }\n    }; // Use functional update to update playlists state variable\n    // to avoid including playlists as a dependency for this hook\n    // and creating an infinite loop\n\n\n    setPlaylists(playlists => [...(playlists ? playlists : []), ...playlistsData.items]); // usually will not get to here\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  console.log(playlists);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Playlists, \"PgLviQ9jC4fRO/1kncakisM0vB8=\");\n\n_c = Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","useContext","axios","getCurrentUserPlaylists","catchErrors","ChangeContext","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","didChange","fetchData","data","fetchMoreData","next","get","items","console","log"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\nimport { ChangeContext } from '../contexts/context';\r\n\r\n\r\nexport const Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  const {didChange} = useContext(ChangeContext);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      setPlaylistsData(data);\r\n    };\r\n\r\n    catchErrors(fetchData());\r\n  }, [didChange]);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        const { data } = await axios.get(playlistsData.next);\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n\r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n\r\n    // usually will not get to here\r\n    catchErrors(fetchMoreData());\r\n  }, [playlistsData]);\r\n\r\n  \r\n\r\n  console.log(playlists);\r\n  return (\r\n    <h1>test</h1>\r\n  );\r\n};\r\n\r\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,QAAwC,YAAxC;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SAASC,aAAT,QAA8B,qBAA9B;;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAC7B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,IAAD,CAAlD;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;EAEA,MAAM;IAACY;EAAD,IAAcV,UAAU,CAACI,aAAD,CAA9B;EAEAL,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,YAAY;MAC5B,MAAM;QAAEC;MAAF,IAAW,MAAMV,uBAAuB,EAA9C;MACAK,gBAAgB,CAACK,IAAD,CAAhB;IACD,CAHD;;IAKAT,WAAW,CAACQ,SAAS,EAAV,CAAX;EACD,CAPQ,EAON,CAACD,SAAD,CAPM,CAAT,CAN6B,CAe7B;EACA;;EACAX,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,aAAL,EAAoB;MAClB;IACD,CAHa,CAKd;IACA;;;IACA,MAAMO,aAAa,GAAG,YAAY;MAChC,IAAIP,aAAa,CAACQ,IAAlB,EAAwB;QACtB,MAAM;UAAEF;QAAF,IAAW,MAAMX,KAAK,CAACc,GAAN,CAAUT,aAAa,CAACQ,IAAxB,CAAvB;QACAP,gBAAgB,CAACK,IAAD,CAAhB;MACD;IACF,CALD,CAPc,CAcd;IACA;IACA;;;IACAH,YAAY,CAACD,SAAS,IAAK,CACzB,IAAGA,SAAS,GAAGA,SAAH,GAAe,EAA3B,CADyB,EAEzB,GAAGF,aAAa,CAACU,KAFQ,CAAf,CAAZ,CAjBc,CAsBd;;IACAb,WAAW,CAACU,aAAa,EAAd,CAAX;EACD,CAxBQ,EAwBN,CAACP,aAAD,CAxBM,CAAT;EA4BAW,OAAO,CAACC,GAAR,CAAYV,SAAZ;EACA,oBACE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAGD,CAjDM;;GAAMH,S;;KAAAA,S"},"metadata":{},"sourceType":"module"}