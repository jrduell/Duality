{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists, getPlaylistItems } from '../spotify';\nimport { catchErrors } from '../utils'; //import { ChangeContext } from '../contexts/context';\n\nexport const Playlists = () => {\n  _s();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const [playlistCount, setPlaylistCount] = useState(0);\n  const PIDS = [];\n  const [didFinish, setDidFinish] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n      setPlaylistsData(data);\n    }; //console.log(playlistsData);\n\n\n    catchErrors(fetchData());\n  }, []); // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        setPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (playlists !== null) {\n          Object.entries(playlists).forEach((key, value) => {\n            const PID = key[1][\"id\"]; //console.log(PID);\n\n            if (!PIDS.includes(PID)) {\n              PIDS.push(PID);\n            }\n          }); //setDidFinish(true);\n          //var i = 0;\n\n          for (var PID in PIDS) {\n            const id = PIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id); //console.log(listData);\n\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!songIDs.includes(songID) && songID !== null) {\n                songIDs.push(songID);\n              }\n            }); //console.log(\"before while: \" + i);\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next); //console.log(\"nexted\");\n\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"];\n\n                if (!songIDs.includes(songID) && songID !== null) {\n                  songIDs.push(songID);\n                }\n              });\n            } //console.log(\"after while\");\n            //i++;\n\n          }\n\n          console.log(songIDs.length);\n        }\n      }\n    };\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  const songIDs = [];\n  /*\r\n    useEffect(() => {\r\n      //setDidFinish only used once in program\r\n      //retrieve songs for each playlist here\r\n      \r\n      //loop through each playlist PID\r\n      \r\n      console.log(PIDS.length);\r\n      const fetchData = async() => {\r\n          for (var PID in PIDS) {\r\n              const id = PIDS[PID];\r\n              \r\n              //data contains first 100 songs\r\n              const data = await getPlaylistItems(id);\r\n              let i = 0;\r\n              //console.log(data);\r\n              Object.entries(data).forEach((key, value) => {\r\n                  \r\n                  //const songID = key[1][\"data\"][\"items\"][i][\"track\"][\"id\"];\r\n                  //console.log(songID);\r\n                  console.log(data);\r\n                  i++;\r\n              });\r\n              \r\n              if (data.next) {\r\n                  const { data } = await axios.get(data.next);\r\n  \r\n              }\r\n          }\r\n      }\r\n  \r\n      catchErrors(fetchData());\r\n  \r\n    }, [didFinish]); \r\n  */\n\n  return;\n};\n\n_s(Playlists, \"QWqtsLe4cRhX00TX53/hyPBV6xo=\");\n\n_c = Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","getPlaylistItems","catchErrors","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","playlistCount","setPlaylistCount","PIDS","didFinish","setDidFinish","fetchData","data","items","fetchMoreData","next","get","Object","entries","forEach","key","value","PID","includes","push","id","listData","songID","songIDs","console","log","length"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists, getPlaylistItems } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n\r\nexport const Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n  const [playlistCount, setPlaylistCount] = useState(0);\r\n\r\n  const PIDS = [];\r\n  const [didFinish, setDidFinish] = useState(false);\r\n\r\n  useEffect(() =>  {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      \r\n      setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n      ]));\r\n\r\n      setPlaylistsData(data);\r\n    };\r\n    //console.log(playlistsData);\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        //as long as there is more data to be retrieved\r\n        const { data } = await axios.get(playlistsData.next);\r\n        \r\n        setPlaylists(playlists => ([\r\n            ...playlists ? playlists : [],\r\n            ...data.items\r\n          ]));\r\n\r\n        setPlaylistsData(data);\r\n      } else {\r\n        //when all urls are retrieved\r\n        if(playlists !== null) { \r\n            Object.entries(playlists).forEach((key, value) => {\r\n                const PID = key[1][\"id\"];\r\n                //console.log(PID);\r\n                if (!PIDS.includes(PID)) { \r\n                    PIDS.push(PID);\r\n                }\r\n            });\r\n            //setDidFinish(true);\r\n            //var i = 0;\r\n            for (var PID in PIDS) {\r\n                const id = PIDS[PID];\r\n                \r\n                //data contains first 100 songs\r\n                let listData = await getPlaylistItems(id);\r\n                //console.log(listData);\r\n                Object.entries(listData.data.items).forEach((key, value) => {\r\n                    const songID = key[1][\"track\"][\"id\"];\r\n                    if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                });\r\n                //console.log(\"before while: \" + i);\r\n                \r\n                while (listData.data.next) {\r\n                    listData = await axios.get(listData.data.next);\r\n                    //console.log(\"nexted\");\r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    })\r\n                    \r\n                }\r\n                //console.log(\"after while\");\r\n                //i++;\r\n            }\r\n            console.log(songIDs.length);\r\n        }\r\n      }\r\n    };\r\n    \r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n  const songIDs = [];\r\n/*\r\n  useEffect(() => {\r\n    //setDidFinish only used once in program\r\n    //retrieve songs for each playlist here\r\n    \r\n    //loop through each playlist PID\r\n    \r\n    console.log(PIDS.length);\r\n    const fetchData = async() => {\r\n        for (var PID in PIDS) {\r\n            const id = PIDS[PID];\r\n            \r\n            //data contains first 100 songs\r\n            const data = await getPlaylistItems(id);\r\n            let i = 0;\r\n            //console.log(data);\r\n            Object.entries(data).forEach((key, value) => {\r\n                \r\n                //const songID = key[1][\"data\"][\"items\"][i][\"track\"][\"id\"];\r\n                //console.log(songID);\r\n                console.log(data);\r\n                i++;\r\n            });\r\n            \r\n            if (data.next) {\r\n                const { data } = await axios.get(data.next);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    catchErrors(fetchData());\r\n\r\n  }, [didFinish]); \r\n*/\r\n  return;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}