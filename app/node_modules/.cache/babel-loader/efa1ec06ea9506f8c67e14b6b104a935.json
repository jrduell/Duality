{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists, getPlaylistItems, getUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils'; //import { ChangeContext } from '../contexts/context';\n//figure out username\n\nexport const MergePlaylists = async userName => {\n  //await only works if function applied to returns a promise... read on this\n  //const CurrentSongList = CurrentPlaylists();\n  //const UserSongList = UserPlaylists(\"lauravonbargen\");\n\n  /*\r\n      const CurrentSongList = await new Promise((resolve, reject) => {\r\n          const cur = CurrentPlaylists();\r\n          resolve(cur);\r\n      });\r\n  \r\n      const UserSongList = await new Promise((resolve, reject) => {\r\n          const usr = UserPlaylists(userName);\r\n          resolve(usr);\r\n      });\r\n  \r\n      findOverlap(CurrentSongList, UserSongList);*/\n  console.log(\"here\");\n};\n_c = MergePlaylists;\n\nfunction findOverlap(CurrentSongs, UserSongs) {\n  let overlap = [];\n\n  for (var i = 0; i < UserSongs.length; i++) {\n    const index = CurrentSongs.indexOf(UserSongs[i]);\n\n    if (index === -1) {\n      //means song is unique and should be added to overlap\n      overlap.push(CurrentSongs[index]);\n    }\n  }\n\n  console.log(\"Overlap: \" + overlap.length);\n}\n\nconst CurrentPlaylists = () => {\n  _s();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const PIDS = [];\n  const songIDs = [];\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n      setPlaylistsData(data);\n    }; //console.log(playlistsData);\n\n\n    catchErrors(fetchData());\n  }, []); // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        setPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (playlists !== null) {\n          Object.entries(playlists).forEach((key, value) => {\n            const PID = key[1][\"id\"]; //console.log(PID);\n\n            if (!PIDS.includes(PID)) {\n              PIDS.push(PID);\n            }\n          });\n\n          for (var PID in PIDS) {\n            const id = PIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id); //console.log(listData);\n\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!songIDs.includes(songID) && songID !== null) {\n                songIDs.push(songID);\n              }\n            }); //console.log(\"before while: \" + i);\n\n            songIDs.push(listData.data.items);\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              console.log(\"nexted\");\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"];\n\n                if (!songIDs.includes(songID) && songID !== null) {\n                  songIDs.push(songID);\n                }\n              });\n              songIDs.push(listData.data.items);\n            }\n          }\n\n          console.log(songIDs.length);\n        }\n      }\n    };\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  return songIDs;\n};\n\n_s(CurrentPlaylists, \"7k+NFKyGxcUnGBIpi7HyuIISDKA=\");\n\n_c2 = CurrentPlaylists;\n\nconst UserPlaylists = userName => {\n  _s2();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const PIDS = [];\n  const songIDs = [];\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getUserPlaylists(userName);\n      setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n      setPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, []);\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        setPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (playlists !== null) {\n          Object.entries(playlists).forEach((key, value) => {\n            const PID = key[1][\"id\"]; //console.log(PID);\n\n            if (!PIDS.includes(PID)) {\n              PIDS.push(PID);\n            }\n          });\n\n          for (var PID in PIDS) {\n            const id = PIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id); //console.log(listData);\n\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!songIDs.includes(songID) && songID !== null) {\n                songIDs.push(songID);\n              }\n            }); //console.log(\"before while: \" + i);\n\n            songIDs.push(listData.data.items);\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              console.log(\"nexted\");\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"];\n\n                if (!songIDs.includes(songID) && songID !== null) {\n                  songIDs.push(songID);\n                }\n              });\n              songIDs.push(listData.data.items);\n            }\n          }\n\n          console.log(songIDs.length);\n        }\n      }\n    };\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  return songIDs;\n};\n\n_s2(UserPlaylists, \"7k+NFKyGxcUnGBIpi7HyuIISDKA=\");\n\n_c3 = UserPlaylists;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MergePlaylists\");\n$RefreshReg$(_c2, \"CurrentPlaylists\");\n$RefreshReg$(_c3, \"UserPlaylists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","getPlaylistItems","getUserPlaylists","catchErrors","MergePlaylists","userName","console","log","findOverlap","CurrentSongs","UserSongs","overlap","i","length","index","indexOf","push","CurrentPlaylists","playlistsData","setPlaylistsData","playlists","setPlaylists","PIDS","songIDs","fetchData","data","items","fetchMoreData","next","get","Object","entries","forEach","key","value","PID","includes","id","listData","songID","UserPlaylists"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists, getPlaylistItems, getUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n//figure out username\r\nexport const MergePlaylists = async (userName) => {\r\n    //await only works if function applied to returns a promise... read on this\r\n    //const CurrentSongList = CurrentPlaylists();\r\n    //const UserSongList = UserPlaylists(\"lauravonbargen\");\r\n/*\r\n    const CurrentSongList = await new Promise((resolve, reject) => {\r\n        const cur = CurrentPlaylists();\r\n        resolve(cur);\r\n    });\r\n\r\n    const UserSongList = await new Promise((resolve, reject) => {\r\n        const usr = UserPlaylists(userName);\r\n        resolve(usr);\r\n    });\r\n\r\n    findOverlap(CurrentSongList, UserSongList);*/\r\n    console.log(\"here\");\r\n}\r\n\r\nfunction findOverlap(CurrentSongs, UserSongs) {\r\n    let overlap = [];\r\n\r\n    for (var i = 0; i < UserSongs.length; i++) {\r\n        const index = CurrentSongs.indexOf(UserSongs[i]);\r\n        if (index === -1) {\r\n            //means song is unique and should be added to overlap\r\n            overlap.push(CurrentSongs[index]);\r\n        }\r\n    }\r\n    console.log(\"Overlap: \" + overlap.length);\r\n}\r\n\r\nconst CurrentPlaylists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  const PIDS = [];\r\n  const songIDs = [];\r\n\r\n\r\n  useEffect(() =>  {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      \r\n      setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n      ]));\r\n\r\n      setPlaylistsData(data);\r\n    };\r\n    //console.log(playlistsData);\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        //as long as there is more data to be retrieved\r\n        const { data } = await axios.get(playlistsData.next);\r\n        \r\n        setPlaylists(playlists => ([\r\n            ...playlists ? playlists : [],\r\n            ...data.items\r\n          ]));\r\n\r\n        setPlaylistsData(data);\r\n      } else {\r\n        //when all urls are retrieved\r\n        if(playlists !== null) { \r\n            Object.entries(playlists).forEach((key, value) => {\r\n                const PID = key[1][\"id\"];\r\n                //console.log(PID);\r\n                if (!PIDS.includes(PID)) { \r\n                    PIDS.push(PID);\r\n                }\r\n            });\r\n            \r\n            for (var PID in PIDS) {\r\n                const id = PIDS[PID];\r\n                \r\n                //data contains first 100 songs\r\n                let listData = await getPlaylistItems(id);\r\n                //console.log(listData);\r\n                \r\n                Object.entries(listData.data.items).forEach((key, value) => {\r\n                    const songID = key[1][\"track\"][\"id\"];\r\n                    if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                });\r\n                //console.log(\"before while: \" + i);\r\n                songIDs.push(listData.data.items);\r\n                \r\n                while (listData.data.next) {\r\n\r\n                    listData = await axios.get(listData.data.next);\r\n                    console.log(\"nexted\");\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    })\r\n                    songIDs.push(listData.data.items);\r\n                    \r\n                }\r\n            }\r\n            console.log(songIDs.length);\r\n        }\r\n      }\r\n    };\r\n    \r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n\r\n  return songIDs;\r\n};\r\n\r\nconst UserPlaylists = (userName) => {\r\n    const [playlistsData, setPlaylistsData] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n\r\n    const PIDS = [];\r\n    const songIDs = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getUserPlaylists(userName);\r\n        \r\n        setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n        ]));\r\n\r\n        setPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!playlistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const fetchMoreData = async () => {\r\n            if (playlistsData.next) {\r\n            //as long as there is more data to be retrieved\r\n            const { data } = await axios.get(playlistsData.next);\r\n            \r\n            setPlaylists(playlists => ([\r\n                ...playlists ? playlists : [],\r\n                ...data.items\r\n                ]));\r\n\r\n            setPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(playlists !== null) { \r\n                Object.entries(playlists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    //console.log(PID);\r\n                    if (!PIDS.includes(PID)) { \r\n                        PIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in PIDS) {\r\n                    const id = PIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    //console.log(listData);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    });\r\n                    //console.log(\"before while: \" + i);\r\n                    songIDs.push(listData.data.items);\r\n                    \r\n                    while (listData.data.next) {\r\n\r\n                        listData = await axios.get(listData.data.next);\r\n                        console.log(\"nexted\");\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                        })\r\n                        songIDs.push(listData.data.items);\r\n                        \r\n                    }\r\n                }\r\n                console.log(songIDs.length);\r\n            }\r\n            }\r\n        };\r\n        \r\n        catchErrors(fetchMoreData());\r\n\r\n        }, [playlistsData]);\r\n\r\n        return songIDs;\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}