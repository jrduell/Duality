{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jrdue\\\\Desktop\\\\Current\\\\app\\\\src\\\\dataCollecting\\\\playlists.js\",\n    _s = $RefreshSig$();\n\n/*import { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n\r\nexport const Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  const [didChange, setDidChange] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      setPlaylistsData(data);\r\n    };\r\n\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        const { data } = await axios.get(playlistsData.next);\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n\r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n\r\n    // usually will not get to here\r\n    catchErrors(fetchMoreData());\r\n  }, [playlistsData]);\r\n\r\n  \r\n\r\n  console.log(playlists);\r\n  return (\r\n    <button onClick={()=> setDidChange(!didChange)}>Create</button>\r\n)\r\n};\r\n*/\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils';\nimport { SectionWrapper, PlaylistsGrid } from '../components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Playlists = () => {\n  _s();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, []); // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylistsData(data);\n      }\n    }; // Use functional update to update playlists state variable\n    // to avoid including playlists as a dependency for this hook\n    // and creating an infinite loop\n\n\n    setPlaylists(playlists => [...(playlists ? playlists : []), ...playlistsData.items]); // Fetch next set of playlists as needed\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(SectionWrapper, {\n      title: \"Public Playlists\",\n      breadcrumb: true,\n      children: playlists && /*#__PURE__*/_jsxDEV(PlaylistsGrid, {\n        playlists: playlists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Playlists, \"7k+NFKyGxcUnGBIpi7HyuIISDKA=\");\n\n_c = Playlists;\nexport default Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","catchErrors","SectionWrapper","PlaylistsGrid","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","fetchData","data","fetchMoreData","next","get","items"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["/*import { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n\r\nexport const Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  const [didChange, setDidChange] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      setPlaylistsData(data);\r\n    };\r\n\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        const { data } = await axios.get(playlistsData.next);\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n\r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n\r\n    // usually will not get to here\r\n    catchErrors(fetchMoreData());\r\n  }, [playlistsData]);\r\n\r\n  \r\n\r\n  console.log(playlists);\r\n  return (\r\n    <button onClick={()=> setDidChange(!didChange)}>Create</button>\r\n)\r\n};\r\n*/\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\nimport { SectionWrapper, PlaylistsGrid } from '../components';\r\n\r\nconst Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      setPlaylistsData(data);\r\n    };\r\n\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        const { data } = await axios.get(playlistsData.next);\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n\r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n\r\n    // Fetch next set of playlists as needed\r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n  return (\r\n    <main>\r\n      <SectionWrapper title=\"Public Playlists\" breadcrumb={true}>\r\n        {playlists && (\r\n          <PlaylistsGrid playlists={playlists} />\r\n        )}\r\n      </SectionWrapper>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Playlists;"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,QAAwC,YAAxC;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,eAA9C;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,IAAD,CAAlD;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,YAAY;MAC5B,MAAM;QAAEC;MAAF,IAAW,MAAMV,uBAAuB,EAA9C;MACAM,gBAAgB,CAACI,IAAD,CAAhB;IACD,CAHD;;IAKAT,WAAW,CAACQ,SAAS,EAAV,CAAX;EACD,CAPQ,EAON,EAPM,CAAT,CAJsB,CAatB;EACA;;EACAX,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,aAAL,EAAoB;MAClB;IACD,CAHa,CAKd;IACA;;;IACA,MAAMM,aAAa,GAAG,YAAY;MAChC,IAAIN,aAAa,CAACO,IAAlB,EAAwB;QACtB,MAAM;UAAEF;QAAF,IAAW,MAAMX,KAAK,CAACc,GAAN,CAAUR,aAAa,CAACO,IAAxB,CAAvB;QACAN,gBAAgB,CAACI,IAAD,CAAhB;MACD;IACF,CALD,CAPc,CAcd;IACA;IACA;;;IACAF,YAAY,CAACD,SAAS,IAAK,CACzB,IAAGA,SAAS,GAAGA,SAAH,GAAe,EAA3B,CADyB,EAEzB,GAAGF,aAAa,CAACS,KAFQ,CAAf,CAAZ,CAjBc,CAsBd;;IACAb,WAAW,CAACU,aAAa,EAAd,CAAX;EAED,CAzBQ,EAyBN,CAACN,aAAD,CAzBM,CAAT;EA2BA,oBACE;IAAA,uBACE,QAAC,cAAD;MAAgB,KAAK,EAAC,kBAAtB;MAAyC,UAAU,EAAE,IAArD;MAAA,UACGE,SAAS,iBACR,QAAC,aAAD;QAAe,SAAS,EAAEA;MAA1B;QAAA;QAAA;QAAA;MAAA;IAFJ;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAnDD;;GAAMH,S;;KAAAA,S;AAqDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}