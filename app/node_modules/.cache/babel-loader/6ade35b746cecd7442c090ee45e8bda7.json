{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists, getPlaylistItems, getUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils'; //import { ChangeContext } from '../contexts/context';\n//top level function\n\nexport const MergePlaylists = () => {\n  const CurrentSongList = CurrentPlaylists(); //const UserSongList = UserPlaylists(\"lauravonbargen\");\n\n  /*\r\n      const fetchData = async () => {\r\n          const { data1 } = await CurrentPlaylists();\r\n          const { data2 } = await UserPlaylists();\r\n      }*/\n};\n_c = MergePlaylists;\n\nfunction findOverlap(CurrentSongs, UserSongs) {\n  let overlap = [];\n\n  for (var i = 0; i < UserSongs.length; i++) {\n    const index = CurrentSongs.indexOf(UserSongs[i]);\n\n    if (index === -1) {\n      //means song is unique and should be added to overlap\n      overlap.push(CurrentSongs[index]);\n    }\n  }\n\n  console.log(\"Overlap: \" + overlap.length);\n}\n\nexport const Playlists = () => {\n  _s();\n\n  const [CplaylistsData, CsetPlaylistsData] = useState(null);\n  const [Cplaylists, CsetPlaylists] = useState(null);\n  const [UplaylistsData, UsetPlaylistsData] = useState(null);\n  const [Uplaylists, UsetPlaylists] = useState(null);\n  const [Go, setGo] = useState(false);\n  const [Merge, setMerge] = useState(false);\n  const CPIDS = [];\n  const CsongIDs = [];\n  const UPIDS = [];\n  const UsongIDs = [];\n  const Overlap = [];\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      CsetPlaylists(Cplaylists => [...(Cplaylists ? Cplaylists : []), ...data.items]);\n      CsetPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getUserPlaylists(\"1214092342\");\n      UsetPlaylists(Uplaylists => [...(Uplaylists ? Uplaylists : []), ...data.items]);\n      console.log(\"length: \" + data.length);\n      UsetPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, []);\n  useEffect(() => {\n    if (!CplaylistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreCData = async () => {\n      if (CplaylistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(CplaylistsData.next);\n        CsetPlaylists(Cplaylists => [...(Cplaylists ? Cplaylists : []), ...data.items]);\n        CsetPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (Cplaylists !== null) {\n          Object.entries(Cplaylists).forEach((key, value) => {\n            const PID = key[1][\"id\"];\n\n            if (!CPIDS.includes(PID)) {\n              CPIDS.push(PID);\n            }\n          });\n\n          for (var PID in CPIDS) {\n            const id = CPIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id);\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!CsongIDs.includes(songID) && songID !== null) {\n                CsongIDs.push(songID);\n              }\n            });\n            CsongIDs.push(listData.data.items);\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"];\n\n                if (!CsongIDs.includes(songID) && songID !== null) {\n                  CsongIDs.push(songID);\n                }\n              });\n              CsongIDs.push(listData.data.items); //console.log(\"c IDs: \" + CsongIDs.length);\n            }\n          }\n        }\n\n        setGo(true);\n      }\n    }; //catchErrors(fetchMoreData());\n\n\n    catchErrors(fetchMoreCData()); //catchErrors(fetchMoreUdata(fetchMoreData()));\n  }, [CplaylistsData]);\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  useEffect(() => {\n    setPlaylistsData(UplaylistsData);\n\n    if (!playlistsData) {\n      return;\n    }\n\n    const fetchMoreUData = async () => {\n      console.log(\"Go\");\n\n      if (playlistsData.next) {\n        console.log(\"unext\"); //as long as there is more data to be retrieved\n\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        setPlaylistsData(data);\n      } else {\n        console.log(\"Uelse\"); //when all urls are retrieved\n\n        if (playlists !== null) {\n          Object.entries(playlists).forEach((key, value) => {\n            const PID = key[1][\"id\"]; //console.log(PID);\n\n            if (!UPIDS.includes(PID)) {\n              UPIDS.push(PID);\n            }\n          });\n\n          for (var PID in UPIDS) {\n            console.log(\"pid\");\n            const id = UPIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id); //console.log(listData);\n\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!UsongIDs.includes(songID) && songID !== null) {\n                UsongIDs.push(songID);\n              }\n            });\n            UsongIDs.push(listData.data.items);\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"];\n\n                if (!UsongIDs.includes(songID) && songID !== null) {\n                  UsongIDs.push(songID);\n                }\n              });\n              UsongIDs.push(listData.data.items);\n              console.log(\"u song ids: \" + UsongIDs.length);\n            }\n          }\n\n          for (var i = 0; i < UsongIDs.length; i++) {\n            const index = CsongIDs.indexOf(UsongIDs[i]);\n\n            if (index === -1) {\n              //means song is unique and should be added to overlap\n              Overlap.push(CsongIDs[index]);\n            }\n          }\n\n          setMerge(true);\n        }\n      }\n    };\n\n    catchErrors(fetchMoreUData());\n  }, [Go, playlistsData]);\n  useEffect(() => {\n    console.log(\"Overlapped:\" + Overlap.length);\n  }, [Merge]);\n};\n\n_s(Playlists, \"hPllMsiu7Rfarp3m+/Glu/M+lVM=\");\n\n_c2 = Playlists;\nexport const CurrentPlaylists = () => {\n  _s2();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const PIDS = [];\n  const songIDs = [];\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n      console.log(\"curlen\" + data.length);\n      setPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, []);\n  /*\r\n  useEffect(() => {\r\n      if (!playlistsData) {\r\n          return;\r\n      }\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n      // make sure we get ALL playlists by fetching the next set of playlists\r\n      const fetchMoreData = async () => {\r\n          if (playlistsData.next) {\r\n          //as long as there is more data to be retrieved\r\n          const { data } = await axios.get(playlistsData.next);\r\n          \r\n          setPlaylists(playlists => ([\r\n              ...playlists ? playlists : [],\r\n              ...data.items\r\n              ]));\r\n            setPlaylistsData(data);\r\n          } else {\r\n          //when all urls are retrieved\r\n          if(playlists !== null) { \r\n              Object.entries(playlists).forEach((key, value) => {\r\n                  const PID = key[1][\"id\"];\r\n                  //console.log(PID);\r\n                  if (!PIDS.includes(PID)) { \r\n                      PIDS.push(PID);\r\n                  }\r\n              });\r\n              \r\n              for (var PID in PIDS) {\r\n                  const id = PIDS[PID];\r\n                  \r\n                  //data contains first 100 songs\r\n                  let listData = await getPlaylistItems(id);\r\n                  //console.log(listData);\r\n                  \r\n                  Object.entries(listData.data.items).forEach((key, value) => {\r\n                      const songID = key[1][\"track\"][\"id\"];\r\n                      if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                  });\r\n                  //console.log(\"before while: \" + i);\r\n                  songIDs.push(listData.data.items);\r\n                  \r\n                  while (listData.data.next) {\r\n                        listData = await axios.get(listData.data.next);\r\n                      \r\n                      Object.entries(listData.data.items).forEach((key, value) => {\r\n                          const songID = key[1][\"track\"][\"id\"];\r\n                          if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                      })\r\n                      songIDs.push(listData.data.items);\r\n                      \r\n                  }\r\n                }\r\n              return songIDs;\r\n              \r\n          }\r\n          }\r\n      };\r\n      \r\n      catchErrors(fetchMoreData());\r\n        }, [playlistsData]);\r\n  */\n};\n\n_s2(CurrentPlaylists, \"9KuL9NetKwysi6XBa8mIxwC2pag=\");\n\n_c3 = CurrentPlaylists;\n\nconst UserPlaylists = userName => {\n  _s3();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const PIDS = [];\n  const songIDs = [];\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getUserPlaylists(userName);\n      setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n      setPlaylistsData(data);\n    };\n\n    catchErrors(fetchData());\n  }, []);\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        //as long as there is more data to be retrieved\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylists(playlists => [...(playlists ? playlists : []), ...data.items]);\n        setPlaylistsData(data);\n      } else {\n        //when all urls are retrieved\n        if (playlists !== null) {\n          Object.entries(playlists).forEach((key, value) => {\n            const PID = key[1][\"id\"]; //console.log(PID);\n\n            if (!PIDS.includes(PID)) {\n              PIDS.push(PID);\n            }\n          });\n\n          for (var PID in PIDS) {\n            const id = PIDS[PID]; //data contains first 100 songs\n\n            let listData = await getPlaylistItems(id); //console.log(listData);\n\n            Object.entries(listData.data.items).forEach((key, value) => {\n              const songID = key[1][\"track\"][\"id\"];\n\n              if (!songIDs.includes(songID) && songID !== null) {\n                songIDs.push(songID);\n              }\n            }); //console.log(\"before while: \" + i);\n\n            songIDs.push(listData.data.items);\n\n            while (listData.data.next) {\n              listData = await axios.get(listData.data.next);\n              Object.entries(listData.data.items).forEach((key, value) => {\n                const songID = key[1][\"track\"][\"id\"];\n\n                if (!songIDs.includes(songID) && songID !== null) {\n                  songIDs.push(songID);\n                }\n              });\n              songIDs.push(listData.data.items);\n            }\n          }\n\n          return songIDs;\n        }\n      }\n    };\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n};\n\n_s3(UserPlaylists, \"7k+NFKyGxcUnGBIpi7HyuIISDKA=\");\n\n_c4 = UserPlaylists;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"MergePlaylists\");\n$RefreshReg$(_c2, \"Playlists\");\n$RefreshReg$(_c3, \"CurrentPlaylists\");\n$RefreshReg$(_c4, \"UserPlaylists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","getPlaylistItems","getUserPlaylists","catchErrors","MergePlaylists","CurrentSongList","CurrentPlaylists","findOverlap","CurrentSongs","UserSongs","overlap","i","length","index","indexOf","push","console","log","Playlists","CplaylistsData","CsetPlaylistsData","Cplaylists","CsetPlaylists","UplaylistsData","UsetPlaylistsData","Uplaylists","UsetPlaylists","Go","setGo","Merge","setMerge","CPIDS","CsongIDs","UPIDS","UsongIDs","Overlap","fetchData","data","items","fetchMoreCData","next","get","Object","entries","forEach","key","value","PID","includes","id","listData","songID","playlistsData","setPlaylistsData","playlists","setPlaylists","fetchMoreUData","PIDS","songIDs","UserPlaylists","userName","fetchMoreData"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists, getPlaylistItems, getUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n//top level function\r\nexport const MergePlaylists = () => {\r\n\r\n    const CurrentSongList = CurrentPlaylists();\r\n    //const UserSongList = UserPlaylists(\"lauravonbargen\");\r\n\r\n/*\r\n    const fetchData = async () => {\r\n        const { data1 } = await CurrentPlaylists();\r\n        const { data2 } = await UserPlaylists();\r\n    }*/\r\n\r\n    \r\n}\r\n\r\nfunction findOverlap(CurrentSongs, UserSongs) {\r\n    let overlap = [];\r\n\r\n    for (var i = 0; i < UserSongs.length; i++) {\r\n        const index = CurrentSongs.indexOf(UserSongs[i]);\r\n        if (index === -1) {\r\n            //means song is unique and should be added to overlap\r\n            overlap.push(CurrentSongs[index]);\r\n        }\r\n    }\r\n    console.log(\"Overlap: \" + overlap.length);\r\n}\r\n\r\n\r\nexport const Playlists = () => {\r\n    const [CplaylistsData, CsetPlaylistsData] = useState(null);\r\n    const [Cplaylists, CsetPlaylists] = useState(null);\r\n\r\n    const [UplaylistsData, UsetPlaylistsData] = useState(null);\r\n    const [Uplaylists, UsetPlaylists] = useState(null);\r\n\r\n    const [Go, setGo] = useState(false);\r\n    const [Merge, setMerge] = useState(false);\r\n\r\n    const CPIDS = [];\r\n    const CsongIDs = [];\r\n\r\n    const UPIDS = [];\r\n    const UsongIDs = [];\r\n\r\n    const Overlap = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getCurrentUserPlaylists();\r\n        \r\n        CsetPlaylists(Cplaylists => ([\r\n        ...Cplaylists ? Cplaylists : [],\r\n        ...data.items\r\n        ]));\r\n        \r\n        CsetPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n    useEffect(() =>  {\r\n        const fetchData = async () => {\r\n            const { data } = await getUserPlaylists(\"1214092342\");\r\n            \r\n            UsetPlaylists(Uplaylists => ([\r\n            ...Uplaylists ? Uplaylists : [],\r\n            ...data.items\r\n            ]));\r\n            console.log(\"length: \" + data.length);\r\n            UsetPlaylistsData(data);\r\n        };\r\n        catchErrors(fetchData());\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!CplaylistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const fetchMoreCData = async () => {\r\n            if (CplaylistsData.next) {\r\n                //as long as there is more data to be retrieved\r\n                const { data } = await axios.get(CplaylistsData.next);\r\n                \r\n                CsetPlaylists(Cplaylists => ([\r\n                    ...Cplaylists ? Cplaylists : [],\r\n                    ...data.items\r\n                    ]));\r\n\r\n                CsetPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(Cplaylists !== null) { \r\n                Object.entries(Cplaylists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    if (!CPIDS.includes(PID)) { \r\n                        CPIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in CPIDS) {\r\n                    const id = CPIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!CsongIDs.includes(songID) && songID !== null) { CsongIDs.push(songID); }\r\n                    });\r\n\r\n                    CsongIDs.push(listData.data.items);\r\n                    \r\n                    while (listData.data.next) {\r\n\r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!CsongIDs.includes(songID) && songID !== null) { CsongIDs.push(songID); }\r\n                        })\r\n                        \r\n                        CsongIDs.push(listData.data.items);\r\n                        //console.log(\"c IDs: \" + CsongIDs.length);\r\n                    }\r\n                }\r\n            }\r\n            setGo(true);\r\n        }\r\n    };\r\n        \r\n        //catchErrors(fetchMoreData());\r\n    \r\n        catchErrors(fetchMoreCData());\r\n\r\n        //catchErrors(fetchMoreUdata(fetchMoreData()));\r\n    }, [CplaylistsData]);\r\n    \r\n\r\n    const [playlistsData, setPlaylistsData] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        \r\n\r\n        setPlaylistsData(UplaylistsData);\r\n\r\n        if (!playlistsData) { return; }\r\n\r\n        const fetchMoreUData = async () => {\r\n            console.log(\"Go\");\r\n            if (playlistsData.next) {\r\n                console.log(\"unext\");\r\n                //as long as there is more data to be retrieved\r\n                const { data } = await axios.get(playlistsData.next);\r\n                \r\n                setPlaylists(playlists => ([\r\n                    ...playlists ? playlists : [],\r\n                    ...data.items\r\n                    ]));\r\n    \r\n                setPlaylistsData(data);\r\n            } else {\r\n                console.log(\"Uelse\");\r\n                //when all urls are retrieved\r\n                if(playlists !== null) { \r\n                    Object.entries(playlists).forEach((key, value) => {\r\n                        const PID = key[1][\"id\"];\r\n                        //console.log(PID);\r\n                        if (!UPIDS.includes(PID)) { \r\n                            UPIDS.push(PID);\r\n                        }\r\n                    });\r\n                    \r\n                    for (var PID in UPIDS) {\r\n                        console.log(\"pid\");\r\n                        const id = UPIDS[PID];\r\n                        \r\n                        //data contains first 100 songs\r\n                        let listData = await getPlaylistItems(id);\r\n                        //console.log(listData);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!UsongIDs.includes(songID) && songID !== null) { UsongIDs.push(songID); }\r\n                        });\r\n\r\n                        UsongIDs.push(listData.data.items);\r\n                        \r\n                        while (listData.data.next) {\r\n    \r\n                            listData = await axios.get(listData.data.next);\r\n                            \r\n                            Object.entries(listData.data.items).forEach((key, value) => {\r\n                                const songID = key[1][\"track\"][\"id\"];\r\n                                if (!UsongIDs.includes(songID) && songID !== null) { UsongIDs.push(songID); }\r\n                            })\r\n                            UsongIDs.push(listData.data.items);\r\n                            console.log(\"u song ids: \" + UsongIDs.length);\r\n                        }\r\n                    }  \r\n\r\n                    for (var i = 0; i < UsongIDs.length; i++) {\r\n                        const index = CsongIDs.indexOf(UsongIDs[i]);\r\n                        if (index === -1) {\r\n                            //means song is unique and should be added to overlap\r\n                            Overlap.push(CsongIDs[index]);\r\n                        }\r\n                    }\r\n                    \r\n                    setMerge(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        catchErrors(fetchMoreUData());\r\n    }, [Go, playlistsData]);\r\n    \r\n    useEffect(() => {\r\n        console.log(\"Overlapped:\" + Overlap.length);\r\n    }, [Merge]);\r\n    \r\n};\r\n\r\n\r\n\r\nexport const CurrentPlaylists = () => {\r\n    const [playlistsData, setPlaylistsData] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n\r\n    const PIDS = [];\r\n    const songIDs = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getCurrentUserPlaylists();\r\n        \r\n        setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n        ]));\r\n        console.log(\"curlen\" + data.length);\r\n        setPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n    /*\r\n    useEffect(() => {\r\n        if (!playlistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const fetchMoreData = async () => {\r\n            if (playlistsData.next) {\r\n            //as long as there is more data to be retrieved\r\n            const { data } = await axios.get(playlistsData.next);\r\n            \r\n            setPlaylists(playlists => ([\r\n                ...playlists ? playlists : [],\r\n                ...data.items\r\n                ]));\r\n\r\n            setPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(playlists !== null) { \r\n                Object.entries(playlists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    //console.log(PID);\r\n                    if (!PIDS.includes(PID)) { \r\n                        PIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in PIDS) {\r\n                    const id = PIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    //console.log(listData);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    });\r\n                    //console.log(\"before while: \" + i);\r\n                    songIDs.push(listData.data.items);\r\n                    \r\n                    while (listData.data.next) {\r\n\r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                        })\r\n                        songIDs.push(listData.data.items);\r\n                        \r\n                    }\r\n\r\n                }\r\n                return songIDs;\r\n                \r\n            }\r\n            }\r\n        };\r\n        \r\n        catchErrors(fetchMoreData());\r\n\r\n        }, [playlistsData]);\r\n    */\r\n};\r\n\r\nconst UserPlaylists = (userName) => {\r\n    const [playlistsData, setPlaylistsData] = useState(null);\r\n    const [playlists, setPlaylists] = useState(null);\r\n\r\n    const PIDS = [];\r\n    const songIDs = [];\r\n\r\n    useEffect(() =>  {\r\n    const fetchData = async () => {\r\n        const { data } = await getUserPlaylists(userName);\r\n        \r\n        setPlaylists(playlists => ([\r\n        ...playlists ? playlists : [],\r\n        ...data.items\r\n        ]));\r\n\r\n        setPlaylistsData(data);\r\n    };\r\n    catchErrors(fetchData());\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!playlistsData) {\r\n            return;\r\n        }\r\n\r\n        // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n        // make sure we get ALL playlists by fetching the next set of playlists\r\n        const fetchMoreData = async () => {\r\n            if (playlistsData.next) {\r\n            //as long as there is more data to be retrieved\r\n            const { data } = await axios.get(playlistsData.next);\r\n            \r\n            setPlaylists(playlists => ([\r\n                ...playlists ? playlists : [],\r\n                ...data.items\r\n                ]));\r\n\r\n            setPlaylistsData(data);\r\n            } else {\r\n            //when all urls are retrieved\r\n            if(playlists !== null) { \r\n                Object.entries(playlists).forEach((key, value) => {\r\n                    const PID = key[1][\"id\"];\r\n                    //console.log(PID);\r\n                    if (!PIDS.includes(PID)) { \r\n                        PIDS.push(PID);\r\n                    }\r\n                });\r\n                \r\n                for (var PID in PIDS) {\r\n                    const id = PIDS[PID];\r\n                    \r\n                    //data contains first 100 songs\r\n                    let listData = await getPlaylistItems(id);\r\n                    //console.log(listData);\r\n                    \r\n                    Object.entries(listData.data.items).forEach((key, value) => {\r\n                        const songID = key[1][\"track\"][\"id\"];\r\n                        if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                    });\r\n                    //console.log(\"before while: \" + i);\r\n                    songIDs.push(listData.data.items);\r\n                    \r\n                    while (listData.data.next) {\r\n\r\n                        listData = await axios.get(listData.data.next);\r\n                        \r\n                        Object.entries(listData.data.items).forEach((key, value) => {\r\n                            const songID = key[1][\"track\"][\"id\"];\r\n                            if (!songIDs.includes(songID) && songID !== null) { songIDs.push(songID); }\r\n                        })\r\n                        songIDs.push(listData.data.items);\r\n                        \r\n                    }\r\n                }\r\n                \r\n                return songIDs;\r\n            }\r\n            }\r\n        };\r\n        \r\n        catchErrors(fetchMoreData());\r\n\r\n        }, [playlistsData]);\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}