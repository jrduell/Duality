{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils'; //import { ChangeContext } from '../contexts/context';\n\nexport const Playlists = () => {\n  _s();\n\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylistsData(data);\n    }; //console.log(playlistsData);\n\n\n    catchErrors(fetchData());\n  }, []); // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    } // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n\n\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylistsData(data);\n      }\n    }; // Use functional update to update playlists state variable\n    // to avoid including playlists as a dependency for this hook\n    // and creating an infinite loop\n\n\n    setPlaylists(playlists => [...(playlists ? playlists : []), ...playlistsData.items]); // usually will not get to here\n\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  const [songs, setSongs] = useState(null);\n  useEffect(() => {\n    if (playlists !== null) {\n      let count = 0;\n\n      for (var playlist in playlists) {\n        count++;\n        console.log(count);\n      }\n    }\n\n    console.log('-----------------------------');\n  }, [playlists]);\n  return;\n};\n\n_s(Playlists, \"jj3mEEtK5G1V9gmCb16RtR4QHgc=\");\n\n_c = Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","catchErrors","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","fetchData","data","fetchMoreData","next","get","items","songs","setSongs","count","playlist","console","log"],"sources":["C:/Users/jrdue/Desktop/Current/app/src/dataCollecting/playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\n//import { ChangeContext } from '../contexts/context';\r\n\r\n\r\nexport const Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  useEffect(() =>  {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      setPlaylistsData(data);\r\n    };\r\n    //console.log(playlistsData);\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        const { data } = await axios.get(playlistsData.next);\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n    \r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n\r\n    \r\n    // usually will not get to here\r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n  const [songs, setSongs] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if(playlists !== null) { \r\n        let count = 0;\r\n        for (var playlist in playlists) {\r\n            count++;\r\n            console.log(count);\r\n        }\r\n        \r\n    }\r\n    console.log('-----------------------------');\r\n  }, [playlists]);\r\n\r\n  return;\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,QAAwC,YAAxC;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CACA;;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAC7B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,IAAD,CAAlD;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;EAEAC,SAAS,CAAC,MAAO;IACf,MAAMS,SAAS,GAAG,YAAY;MAC5B,MAAM;QAAEC;MAAF,IAAW,MAAMR,uBAAuB,EAA9C;MACAI,gBAAgB,CAACI,IAAD,CAAhB;IACD,CAHD,CADe,CAKf;;;IACAP,WAAW,CAACM,SAAS,EAAV,CAAX;EACD,CAPQ,EAON,EAPM,CAAT,CAJ6B,CAa7B;EACA;;EACAT,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,aAAL,EAAoB;MAClB;IACD,CAHa,CAKd;IACA;;;IACA,MAAMM,aAAa,GAAG,YAAY;MAChC,IAAIN,aAAa,CAACO,IAAlB,EAAwB;QACtB,MAAM;UAAEF;QAAF,IAAW,MAAMT,KAAK,CAACY,GAAN,CAAUR,aAAa,CAACO,IAAxB,CAAvB;QACAN,gBAAgB,CAACI,IAAD,CAAhB;MACD;IACF,CALD,CAPc,CAcd;IACA;IACA;;;IACAF,YAAY,CAACD,SAAS,IAAK,CACzB,IAAGA,SAAS,GAAGA,SAAH,GAAe,EAA3B,CADyB,EAEzB,GAAGF,aAAa,CAACS,KAFQ,CAAf,CAAZ,CAjBc,CAuBd;;IACAX,WAAW,CAACQ,aAAa,EAAd,CAAX;EAED,CA1BQ,EA0BN,CAACN,aAAD,CA1BM,CAAT;EA4BA,MAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACd,IAAGO,SAAS,KAAK,IAAjB,EAAuB;MACnB,IAAIU,KAAK,GAAG,CAAZ;;MACA,KAAK,IAAIC,QAAT,IAAqBX,SAArB,EAAgC;QAC5BU,KAAK;QACLE,OAAO,CAACC,GAAR,CAAYH,KAAZ;MACH;IAEJ;;IACDE,OAAO,CAACC,GAAR,CAAY,+BAAZ;EACD,CAVQ,EAUN,CAACb,SAAD,CAVM,CAAT;EAYA;AACD,CA1DM;;GAAMH,S;;KAAAA,S"},"metadata":{},"sourceType":"module"}